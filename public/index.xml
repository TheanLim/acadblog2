<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thean C. Lim on Thean C. Lim</title>
    <link>/</link>
    <description>Recent content in Thean C. Lim on Thean C. Lim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Thean Cheat Lim</copyright>
    <lastBuildDate>Thu, 12 Apr 2018 00:00:00 -0500</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tidy Data with tidyr</title>
      <link>/readings/tidy-data-with-tidyr/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/readings/tidy-data-with-tidyr/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tidy-data&#34;&gt;Tidy Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#spreading-and-gathering&#34;&gt;Spreading and Gathering&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#gathering-by-gatherdata-key-value-cols_selection&#34;&gt;Gathering by &lt;code&gt;gather(data, key, value, cols_selection)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#spreading-with-spreaddata-key-value-fill-na&#34;&gt;Spreading with &lt;code&gt;spread(data, key, value, fill = NA)&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#unique-identifiers-in-spread&#34;&gt;Unique identifiers in &lt;code&gt;spread&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#imperfect-symmetrical-complement-of-spread-and-gather-unless-convert-true&#34;&gt;Imperfect symmetrical complement of &lt;code&gt;spread&lt;/code&gt; and &lt;code&gt;gather&lt;/code&gt;| unless &lt;code&gt;convert = TRUE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#separating-and-uniting&#34;&gt;Separating and Uniting&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#separate-by-separatedata-...-col_to_be_separated-into-new_vars_name&#34;&gt;Separate by &lt;code&gt;separate(data, ... = col_to_be_separated, into = new_vars_name)&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#type-conversion-by-convert-true&#34;&gt;Type conversion by &lt;code&gt;convert = TRUE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#specific-character-as-split-values-by-sep&#34;&gt;Specific character as split values by &lt;code&gt;sep = &amp;quot;/&amp;quot;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#split-by-vector-of-integers-by-sep-c24&#34;&gt;Split by vector of integers by &lt;code&gt;sep = c(2,4)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#extra-in-separate&#34;&gt;&lt;code&gt;extra&lt;/code&gt; in &lt;code&gt;separate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fill-in-separate&#34;&gt;&lt;code&gt;fill&lt;/code&gt; in &lt;code&gt;separate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unite-with-unitedata-col-new_col_name-...-selection_of_cols-sep-_-remove-true&#34;&gt;Unite with &lt;code&gt;unite(data, col = new_col_name, ... = selection_of_cols, sep = &amp;quot;_&amp;quot;, remove = TRUE)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#remove-in-unite-and-separate&#34;&gt;&lt;code&gt;remove&lt;/code&gt; in &lt;code&gt;unite()&lt;/code&gt; and &lt;code&gt;separate()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#missing-values&#34;&gt;Missing Values&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#turning-explicit-to-implicit-missing-values-using-na.rm-true&#34;&gt;Turning explicit to implicit missing values using &lt;code&gt;na.rm = TRUE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filling-in-explicit-nas-with-complete&#34;&gt;Filling in explicit NAs with &lt;code&gt;complete()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filling-in-missing-values-from-recent-entries-with-filldata-column&#34;&gt;Filling in missing values from recent entries with &lt;code&gt;fill(data, column)&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#direction-in-fill&#34;&gt;&lt;code&gt;direction&lt;/code&gt; in &lt;code&gt;fill()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comparing-the-fill-arguments-of-spread-and-complete&#34;&gt;Comparing the &lt;code&gt;fill&lt;/code&gt; arguments of &lt;code&gt;spread()&lt;/code&gt; and &lt;code&gt;complete()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nontidy-data&#34;&gt;Nontidy Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;** This post is heavily based on &lt;a href=&#34;http://r4ds.had.co.nz/&#34;&gt;R for Data Science&lt;/a&gt;. Please consider to buy that book if you find this post useful.**&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tidyr&lt;/strong&gt;, a member of the core tidyverse, will be used in this chapter.&lt;/p&gt;
&lt;div id=&#34;tidy-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tidy Data&lt;/h1&gt;
&lt;p&gt;The tidy dataset, will be much easier to work with inside the tidyverse.&lt;br /&gt;
There are three interrelated rules which make a dataset tidy:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Each variable must have its own column.&lt;/li&gt;
&lt;li&gt;Each observation must have its own row.&lt;/li&gt;
&lt;li&gt;Each value must have its own cell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That interrelationship leads to an even simpler set of practical instructions:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Put each dataset in a tibble.&lt;/li&gt;
&lt;li&gt;Put each variable in a column.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The two main advantages of tidy data:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Due to having a consistent data structure (i.e., tidy data), it’s easier to learn the tools that work with it because they have an underlying uniformity.&lt;/li&gt;
&lt;li&gt;There’s a specific advantage to placing variables in columns because it allows R’s vectorized nature to shine. Most built-in R functions work with vectors of values. That makes transforming tidy data feel particularly natural.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of the packages in the tidyverse are designed to work with tidy data. For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute rate per 10,000
table1 %&amp;gt;%
  mutate(rate = cases / population * 10000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##   country      year  cases population  rate
##   &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Afghanistan  1999    745   19987071 0.373
## 2 Afghanistan  2000   2666   20595360 1.29 
## 3 Brazil       1999  37737  172006362 2.19 
## 4 Brazil       2000  80488  174504898 4.61 
## 5 China        1999 212258 1272915272 1.67 
## 6 China        2000 213766 1280428583 1.67&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute cases per year
table1 %&amp;gt;%
  count(year, wt = cases)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 2
##    year      n
##   &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
## 1  1999 250740
## 2  2000 296920&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Visualize changes over time
library(ggplot2)
ggplot(table1, aes(year, cases)) +
  geom_line(aes(group = country), color = &amp;quot;grey50&amp;quot;) +
  geom_point(aes(color = country))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-07-12-tidy-data-with-tidyr_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;spreading-and-gathering&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Spreading and Gathering&lt;/h1&gt;
&lt;p&gt;Most data that you will encounter will be untidy. There are two main reasons:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Most people aren’t familiar with the principles of tidy data, and it’s hard to derive them yourself unless you spend a lot of time working with data.&lt;/li&gt;
&lt;li&gt;Data is often organized to facilitate some use other than analysis. For example, data is often organized to make entry as easy as possible.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, you need to do some tidying for the most of the datasets:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Figure out what the variables and observations are.&lt;/li&gt;
&lt;li&gt;Resolve one of two common problems using tidyr’s &lt;code&gt;gather()&lt;/code&gt; and &lt;code&gt;spread()&lt;/code&gt;:
&lt;ol style=&#34;list-style-type: lower-roman&#34;&gt;
&lt;li&gt;One variable might be spread across multiple columns. Use &lt;code&gt;gather()&lt;/code&gt; for this.&lt;/li&gt;
&lt;li&gt;One observation might be scattered across multiple rows. Use &lt;code&gt;spread()&lt;/code&gt; for this.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;gathering-by-gatherdata-key-value-cols_selection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Gathering by &lt;code&gt;gather(data, key, value, cols_selection)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A common problem is a dataset where some of the column names are not names of variables, but &lt;em&gt;values&lt;/em&gt; of a variable.&lt;/p&gt;
&lt;p&gt;For example, column names &lt;code&gt;1999&lt;/code&gt; and &lt;code&gt;2000&lt;/code&gt; represent &lt;em&gt;values&lt;/em&gt; of the &lt;code&gt;year&lt;/code&gt; variable in &lt;code&gt;table4a&lt;/code&gt;,and each row represents two observations, not one:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table4a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   country     `1999` `2000`
## * &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
## 1 Afghanistan    745   2666
## 2 Brazil       37737  80488
## 3 China       212258 213766&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To tidy a dataset like this, we need to &lt;em&gt;gather&lt;/em&gt; those columns into a new pair of variables.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gather(data, value_column, key_var_name, spreading_value)&lt;/code&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The set of columns that represent &lt;em&gt;values&lt;/em&gt;, not variables. In this example, those are the columns &lt;code&gt;1999&lt;/code&gt; and &lt;code&gt;2000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The name of the variable whose &lt;em&gt;values&lt;/em&gt; form the column names. I call that the key, and here it is &lt;code&gt;year&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The name of the variable whose values are spread over the cells. I call that &lt;code&gt;value&lt;/code&gt;, and here it’s the number of &lt;code&gt;cases&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table4a %&amp;gt;%
`gather(`1999`, `2000`, key = &amp;quot;year&amp;quot;, value = &amp;quot;cases&amp;quot;)

table4b %&amp;gt;%
  gather(`1999`, `2000`, key = &amp;quot;year&amp;quot;, value = &amp;quot;population&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: &amp;lt;text&amp;gt;:2:10: unexpected numeric constant
## 1: table4a %&amp;gt;%
## 2: `gather(`1999
##             ^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To combine the tidied versions of &lt;code&gt;table4a&lt;/code&gt; and &lt;code&gt;table4b&lt;/code&gt; into a single tibble, we need to use &lt;strong&gt;dplyr::left_join()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy4a &amp;lt;- table4a %&amp;gt;%
  gather(`1999`, `2000`, key = &amp;quot;year&amp;quot;, value = &amp;quot;cases&amp;quot;)
tidy4b &amp;lt;- table4b %&amp;gt;%
  gather(`1999`, `2000`, key = &amp;quot;year&amp;quot;, value = &amp;quot;population&amp;quot;)
left_join(tidy4a, tidy4b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   country     year   cases population
##   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;
## 1 Afghanistan 1999     745   19987071
## 2 Brazil      1999   37737  172006362
## 3 China       1999  212258 1272915272
## 4 Afghanistan 2000    2666   20595360
## 5 Brazil      2000   80488  174504898
## 6 China       2000  213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;spreading-with-spreaddata-key-value-fill-na&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Spreading with &lt;code&gt;spread(data, key, value, fill = NA)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Spreading is the opposite of gathering. You use it when an observation is scattered across multiple rows. Thus, &lt;code&gt;spread&lt;/code&gt; and &lt;code&gt;gather&lt;/code&gt; are complement.&lt;/p&gt;
&lt;p&gt;For example, take table2-an observation is a country in a year, but each observation is spread across two rows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12 x 4
##    country      year type            count
##    &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;int&amp;gt;
##  1 Afghanistan  1999 cases             745
##  2 Afghanistan  1999 population   19987071
##  3 Afghanistan  2000 cases            2666
##  4 Afghanistan  2000 population   20595360
##  5 Brazil       1999 cases           37737
##  6 Brazil       1999 population  172006362
##  7 Brazil       2000 cases           80488
##  8 Brazil       2000 population  174504898
##  9 China        1999 cases          212258
## 10 China        1999 population 1272915272
## 11 China        2000 cases          213766
## 12 China        2000 population 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The syntax of spread is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spread(dataframe, key = col_name_or_position_of_var,&lt;/code&gt; &lt;code&gt;value = cols_with_multiple_vars_values, fill = NA)&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spread(table2, key = type, value = count)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   country      year  cases population
##   &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;
## 1 Afghanistan  1999    745   19987071
## 2 Afghanistan  2000   2666   20595360
## 3 Brazil       1999  37737  172006362
## 4 Brazil       2000  80488  174504898
## 5 China        1999 212258 1272915272
## 6 China        2000 213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fill =&lt;/code&gt; ensures that missing values will be replaced by this value.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spread()&lt;/code&gt; and &lt;code&gt;gather()&lt;/code&gt; are complements. &lt;code&gt;gather()&lt;/code&gt; makes wide tables narrower and longer; &lt;code&gt;spread()&lt;/code&gt; makes long tables shorter and wider.&lt;/p&gt;
&lt;div id=&#34;unique-identifiers-in-spread&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Unique identifiers in &lt;code&gt;spread&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Spreading this tibble would fail:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;people &amp;lt;- tribble(
  ~name,             ~key,    ~value,
  #-----------------|--------|------
  &amp;quot;Phillip Woods&amp;quot;,   &amp;quot;age&amp;quot;,       45,
  &amp;quot;Phillip Woods&amp;quot;,   &amp;quot;height&amp;quot;,   186,
  &amp;quot;Phillip Woods&amp;quot;,   &amp;quot;age&amp;quot;,       50,
  &amp;quot;Jessica Cordero&amp;quot;, &amp;quot;age&amp;quot;,       37,
  &amp;quot;Jessica Cordero&amp;quot;, &amp;quot;height&amp;quot;,   156
)
spread(people, key, value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: Duplicate identifiers for rows (1, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spreading the tibble fails because there are two rows with “age” for “Phillip Woods”. We would need to add another column with an indicator for the number observation it is:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;people[[&amp;quot;id&amp;quot;]] &amp;lt;- c(1,1,2,3,3)
spread(people, key, value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   name               id   age height
##   &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 Jessica Cordero    3.   37.   156.
## 2 Phillip Woods      1.   45.   186.
## 3 Phillip Woods      2.   50.    NA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;imperfect-symmetrical-complement-of-spread-and-gather-unless-convert-true&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Imperfect symmetrical complement of &lt;code&gt;spread&lt;/code&gt; and &lt;code&gt;gather&lt;/code&gt;| unless &lt;code&gt;convert = TRUE&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stocks &amp;lt;- tibble(
  year   = c(2015, 2015, 2016, 2016),
  half  = c(   1,    2,     1,    2),
  return = c(1.88, 0.59, 0.92, 0.17)
)
stocks %&amp;gt;%
  spread(year, return) %&amp;gt;%
  gather(&amp;quot;year&amp;quot;, &amp;quot;return&amp;quot;, `2015`:`2016`)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 3
##    half year  return
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
## 1    1. 2015   1.88 
## 2    2. 2015   0.590
## 3    1. 2016   0.920
## 4    2. 2016   0.170&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The functions &lt;code&gt;spread&lt;/code&gt; and &lt;code&gt;gather&lt;/code&gt; are not perfectly symmetrical because column type information is not transferred between them. In the original table the column year was numeric, but after running &lt;code&gt;spread()&lt;/code&gt; and &lt;code&gt;gather()&lt;/code&gt; it is a character vector. This is because the key variable names are always converted to a character vector by &lt;code&gt;gather()&lt;/code&gt; or it will be saved as factor if the &lt;code&gt;factor_key = TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;convert&lt;/code&gt; argument tries to convert character vectors to the appropriate type. In the background this uses the &lt;code&gt;type.convert&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stocks %&amp;gt;%
  spread(year, return) %&amp;gt;%
  gather(&amp;quot;year&amp;quot;, &amp;quot;return&amp;quot;, `2015`:`2016`, convert = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 3
##    half  year return
##   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;
## 1    1.  2015  1.88 
## 2    2.  2015  0.590
## 3    1.  2016  0.920
## 4    2.  2016  0.170&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;separating-and-uniting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Separating and Uniting&lt;/h1&gt;
&lt;div id=&#34;separate-by-separatedata-...-col_to_be_separated-into-new_vars_name&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Separate by &lt;code&gt;separate(data, ... = col_to_be_separated, into = new_vars_name)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;separate()&lt;/code&gt; pulls apart one column into multiple columns, by splitting wherever a separator character appears.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rate&lt;/code&gt; column in &lt;strong&gt;table3&lt;/strong&gt; contains both &lt;code&gt;cases&lt;/code&gt; and &lt;code&gt;population&lt;/code&gt; variables and we need to split it into two variables.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;separate(data, col_to_be_separated, into = new_vars_name)&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table3 %&amp;gt;%
  separate(rate, into = c(&amp;quot;cases&amp;quot;, &amp;quot;population&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   country      year cases  population
## * &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;     
## 1 Afghanistan  1999 745    19987071  
## 2 Afghanistan  2000 2666   20595360  
## 3 Brazil       1999 37737  172006362 
## 4 Brazil       2000 80488  174504898 
## 5 China        1999 212258 1272915272
## 6 China        2000 213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;type-conversion-by-convert-true&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Type conversion by &lt;code&gt;convert = TRUE&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Note that the default behavior in &lt;code&gt;separate()&lt;/code&gt;: it leaves the type of the column as it originally is. However, We can ask &lt;code&gt;separate()&lt;/code&gt; to try and convert to better types using &lt;code&gt;convert = TRUE&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table3 %&amp;gt;%
  separate(
    rate,
    into = c(&amp;quot;cases&amp;quot;, &amp;quot;population&amp;quot;),
    convert = TRUE
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   country      year  cases population
## * &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;
## 1 Afghanistan  1999    745   19987071
## 2 Afghanistan  2000   2666   20595360
## 3 Brazil       1999  37737  172006362
## 4 Brazil       2000  80488  174504898
## 5 China        1999 212258 1272915272
## 6 China        2000 213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;specific-character-as-split-values-by-sep&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Specific character as split values by &lt;code&gt;sep = &amp;quot;/&amp;quot;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;By default, &lt;code&gt;separate()&lt;/code&gt; will split values wherever it sees a nonalphanumeric character (i.e., a character that isn’t a number or letter). If you wish to use a specific character to separate a column, you can pass the character to the sep argument of &lt;code&gt;separate()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table3 %&amp;gt;%
  separate(rate, into = c(&amp;quot;cases&amp;quot;, &amp;quot;population&amp;quot;), sep = &amp;quot;/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   country      year cases  population
## * &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;     
## 1 Afghanistan  1999 745    19987071  
## 2 Afghanistan  2000 2666   20595360  
## 3 Brazil       1999 37737  172006362 
## 4 Brazil       2000 80488  174504898 
## 5 China        1999 212258 1272915272
## 6 China        2000 213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Formally, &lt;strong&gt;sep&lt;/strong&gt; is a regular expression)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;split-by-vector-of-integers-by-sep-c24&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Split by vector of integers by &lt;code&gt;sep = c(2,4)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;You can also pass a vector of integers to &lt;strong&gt;sep&lt;/strong&gt;. &lt;code&gt;separate()&lt;/code&gt; will interpret the integers as positions to split at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Positive values start at 1 on the far left of the strings;&lt;/li&gt;
&lt;li&gt;negative values start at -1 on the far right of the strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When using integers to separate strings, the length of &lt;strong&gt;sep&lt;/strong&gt; should be one less than the number of names in &lt;code&gt;into&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table3 %&amp;gt;%
  separate(year, into = c(&amp;quot;century&amp;quot;, &amp;quot;decade&amp;quot;, &amp;quot;year&amp;quot;), sep = c(2,3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##   country     century decade year  rate             
## * &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;            
## 1 Afghanistan 19      9      9     745/19987071     
## 2 Afghanistan 20      0      0     2666/20595360    
## 3 Brazil      19      9      9     37737/172006362  
## 4 Brazil      20      0      0     80488/174504898  
## 5 China       19      9      9     212258/1272915272
## 6 China       20      0      0     213766/1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extra-in-separate&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;extra&lt;/code&gt; in &lt;code&gt;separate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;extra&lt;/code&gt; argument tells separate what to do if there are too many pieces.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e,f,g&amp;quot;, &amp;quot;h,i,j&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 1
##   x      
##   &amp;lt;chr&amp;gt;  
## 1 a,b,c  
## 2 d,e,f,g
## 3 h,i,j&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that we have an extra &lt;code&gt;g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By default &lt;code&gt;separate&lt;/code&gt; drops the extra values with a warning:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e,f,g&amp;quot;, &amp;quot;h,i,j&amp;quot;)) %&amp;gt;%
  separate(x, c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   one   two   three
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     f    
## 3 h     i     j&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following produces the same result as above, dropping extra values, but without the warning:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e,f,g&amp;quot;, &amp;quot;h,i,j&amp;quot;)) %&amp;gt;%
  separate(x, c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;), extra = &amp;quot;drop&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   one   two   three
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     f    
## 3 h     i     j&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the following, the extra values are not split, so “f,g” appears in column three:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e,f,g&amp;quot;, &amp;quot;h,i,j&amp;quot;)) %&amp;gt;%
  separate(x, c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;), extra = &amp;quot;merge&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   one   two   three
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     f,g  
## 3 h     i     j&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;fill-in-separate&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;fill&lt;/code&gt; in &lt;code&gt;separate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;fill&lt;/code&gt; argument tells separate what to do if there aren’t enough pieces. Now, let’s look at another tibble where we don’t have enough entries (&lt;code&gt;g&lt;/code&gt; is missing in this case):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e&amp;quot;, &amp;quot;f,g,i&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 1
##   x    
##   &amp;lt;chr&amp;gt;
## 1 a,b,c
## 2 d,e  
## 3 f,g,i&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default for &lt;code&gt;fill&lt;/code&gt; is similar to separate; it fills with missing values but emits a warning. In this, row 2 of column “three”, is NA:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e&amp;quot;, &amp;quot;f,g,i&amp;quot;)) %&amp;gt;%
  separate(x, c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   one   two   three
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     &amp;lt;NA&amp;gt; 
## 3 f     g     i&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternative options for &lt;code&gt;fill&lt;/code&gt; are &lt;code&gt;&amp;quot;right&amp;quot;&lt;/code&gt;, to fill with missing values from the right, but without a warning:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e&amp;quot;, &amp;quot;f,g,i&amp;quot;)) %&amp;gt;%
  separate(x, c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;), fill = &amp;quot;right&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   one   two   three
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     &amp;lt;NA&amp;gt; 
## 3 f     g     i&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The option &lt;code&gt;fill = &amp;quot;left&amp;quot;&lt;/code&gt; also fills with missing values without a warning, but this time from the left side. Now, column “one” of row 2 will be missing, and the other values in that row are shifted over:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e&amp;quot;, &amp;quot;f,g,i&amp;quot;)) %&amp;gt;%
  separate(x, c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;), fill = &amp;quot;left&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   one   two   three
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 &amp;lt;NA&amp;gt;  d     e    
## 3 f     g     i&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;unite-with-unitedata-col-new_col_name-...-selection_of_cols-sep-_-remove-true&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Unite with &lt;code&gt;unite(data, col = new_col_name, ... = selection_of_cols, sep = &amp;quot;_&amp;quot;, remove = TRUE)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unite()&lt;/code&gt; is the inverse of &lt;code&gt;separate()&lt;/code&gt;: it combines multiple columns into a single column.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;unite()&lt;/code&gt; to rejoin the &lt;em&gt;century&lt;/em&gt; and &lt;em&gt;year&lt;/em&gt; columns in &lt;strong&gt;table5&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unite(data, col = new_col_name,                                                            ... = selection_of_cols, sep = &amp;quot;_&amp;quot;, remove = TRUE)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;remove&lt;/code&gt; If TRUE, remove input columns from output data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table5 %&amp;gt;%
  unite(col = new, century, year, sep = &amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   country     new   rate             
##   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;            
## 1 Afghanistan 1999  745/19987071     
## 2 Afghanistan 2000  2666/20595360    
## 3 Brazil      1999  37737/172006362  
## 4 Brazil      2000  80488/174504898  
## 5 China       1999  212258/1272915272
## 6 China       2000  213766/1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;remove-in-unite-and-separate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;remove&lt;/code&gt; in &lt;code&gt;unite()&lt;/code&gt; and &lt;code&gt;separate()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Both &lt;code&gt;unite()&lt;/code&gt; and &lt;code&gt;separate()&lt;/code&gt; have a remove argument. It will remove the old variables if it is set to &lt;code&gt;TRUE&lt;/code&gt;. You would set it to &lt;code&gt;FALSE&lt;/code&gt; if you want to create a new variable while keeping the old one.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;missing-values&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Missing Values&lt;/h1&gt;
&lt;p&gt;Surprisingly, a value can be missing in one of two possible ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Explicitly&lt;/em&gt;, i.e., flagged with NA.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Implicitly&lt;/em&gt;, i.e., simply not present in the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stocks &amp;lt;- tibble(
  year = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
  qtr = c( 1, 2, 3, 4, 2, 3, 4),
  return = c(1.88, 0.59, 0.35, NA, 0.92, 0.17, 2.66)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two missing values in this dataset:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The return for the fourth quarter of 2015 is explicitly missing, because the cell where its value should be instead contains NA.&lt;/li&gt;
&lt;li&gt;The return for the first quarter of 2016 is implicitly missing, because it simply does not appear in the dataset.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The way that a dataset is represented can make implicit values explicit. For example, we can make the implicit missing value explicit by putting years in the columns:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stocks %&amp;gt;%
  spread(year, return)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 3
##     qtr `2015` `2016`
##   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1    1.  1.88  NA    
## 2    2.  0.590  0.920
## 3    3.  0.350  0.170
## 4    4. NA      2.66&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;turning-explicit-to-implicit-missing-values-using-na.rm-true&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning explicit to implicit missing values using &lt;code&gt;na.rm = TRUE&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Because these explicit missing values may not be important in other representations of the data, you can set &lt;code&gt;na.rm = TRUE&lt;/code&gt; in &lt;code&gt;gather()&lt;/code&gt; to turn explicit missing values implicit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stocks %&amp;gt;%
  spread(year, return) %&amp;gt;%
  gather(year, return, `2015`:`2016`, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##     qtr year  return
## * &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
## 1    1. 2015   1.88 
## 2    2. 2015   0.590
## 3    3. 2015   0.350
## 4    2. 2016   0.920
## 5    3. 2016   0.170
## 6    4. 2016   2.66&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filling-in-explicit-nas-with-complete&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Filling in explicit NAs with &lt;code&gt;complete()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;complete()&lt;/code&gt; takes a set of columns, and finds all unique combinations. It then ensures the original dataset contains all those values, filling in explicit NAs where necessary:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stocks %&amp;gt;%
  complete(year, qtr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 3
##    year   qtr return
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 2015.    1.  1.88 
## 2 2015.    2.  0.590
## 3 2015.    3.  0.350
## 4 2015.    4. NA    
## 5 2016.    1. NA    
## 6 2016.    2.  0.920
## 7 2016.    3.  0.170
## 8 2016.    4.  2.66&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filling-in-missing-values-from-recent-entries-with-filldata-column&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Filling in missing values from recent entries with &lt;code&gt;fill(data, column)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;When a data source has primarily been used for data entry, missing values may indicate that the previous value should be carried forward:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;treatment &amp;lt;- tribble(
  ~ person,           ~ treatment, ~response,
  &amp;quot;Derrick Whitmore&amp;quot;, 1,           7,
  NA,                 2,           10,
  NA,                 3,           9,
  &amp;quot;Katherine Burke&amp;quot;,  1,           4
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can fill in these missing values with &lt;code&gt;fill()&lt;/code&gt;. It takes a set of columns where you want missing values to be replaced by the most recent nonmissing value (sometimes called last observation carried forward):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;treatment %&amp;gt;%
  fill(person)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 3
##   person           treatment response
##   &amp;lt;chr&amp;gt;                &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1 Derrick Whitmore        1.       7.
## 2 Derrick Whitmore        2.      10.
## 3 Derrick Whitmore        3.       9.
## 4 Katherine Burke         1.       4.&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;direction-in-fill&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;direction&lt;/code&gt; in &lt;code&gt;fill()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fill(data, ..., .direction = c(&amp;quot;down&amp;quot;, &amp;quot;up&amp;quot;))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;fill&lt;/code&gt;, it determines whether NA values should be replaced by the previous non-missing value (&lt;code&gt;&amp;quot;down&amp;quot;&lt;/code&gt;), which is the default, or the next non-missing value (&lt;code&gt;&amp;quot;up&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;comparing-the-fill-arguments-of-spread-and-complete&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Comparing the &lt;code&gt;fill&lt;/code&gt; arguments of &lt;code&gt;spread()&lt;/code&gt; and &lt;code&gt;complete()&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;`&lt;code&gt;spread(data, key, value, fill = NA&lt;/code&gt; vs &lt;code&gt;complete(data, ..., fill = list())&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both replace both explicit and implicit NA.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spread()&lt;/code&gt;: If the tidy structure creates combinations of variables that do not exist in the original data set, spread() will place an NA in the resulting cells. NA is R’s missing value symbol. You can change this behaviour by passing fill an alternative value to use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;complete()&lt;/code&gt; A named list that for each variable supplies a single value to use instead of NA for missing combinations.
&lt;ul&gt;
&lt;li&gt;For example:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- tibble(
              group = c(1:2, 1),
              item_id = c(1:2, 2),
              item_name = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;b&amp;quot;),
              value1 = 1:3,
              value2 = 4:6
            )

## W/O specifying the fill
df %&amp;gt;% complete(group, nesting(item_id, item_name))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 5
##   group item_id item_name value1 value2
##   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
## 1    1.      1. a              1      4
## 2    1.      2. b              3      6
## 3    2.      1. a             NA     NA
## 4    2.      2. b              2      5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Specify a list for the missing value in value1
df %&amp;gt;% complete(group, nesting(item_id, item_name), 
                fill = list(value1 = 0))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 5
##   group item_id item_name value1 value2
##   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;
## 1    1.      1. a             1.      4
## 2    1.      2. b             3.      6
## 3    2.      1. a             0.     NA
## 4    2.      2. b             2.      5&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt; # Case study&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;tidyr::who&lt;/strong&gt; dataset contains tuberculosis (TB) cases broken down by year, country, age, gender, and diagnosis method. Let’ take a look at the dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;who&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7,240 x 60
##    country     iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534
##    &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt;        &amp;lt;int&amp;gt;        &amp;lt;int&amp;gt;
##  1 Afghanistan AF    AFG    1980          NA           NA           NA
##  2 Afghanistan AF    AFG    1981          NA           NA           NA
##  3 Afghanistan AF    AFG    1982          NA           NA           NA
##  4 Afghanistan AF    AFG    1983          NA           NA           NA
##  5 Afghanistan AF    AFG    1984          NA           NA           NA
##  6 Afghanistan AF    AFG    1985          NA           NA           NA
##  7 Afghanistan AF    AFG    1986          NA           NA           NA
##  8 Afghanistan AF    AFG    1987          NA           NA           NA
##  9 Afghanistan AF    AFG    1988          NA           NA           NA
## 10 Afghanistan AF    AFG    1989          NA           NA           NA
## # ... with 7,230 more rows, and 53 more variables: new_sp_m3544 &amp;lt;int&amp;gt;,
## #   new_sp_m4554 &amp;lt;int&amp;gt;, new_sp_m5564 &amp;lt;int&amp;gt;, new_sp_m65 &amp;lt;int&amp;gt;,
## #   new_sp_f014 &amp;lt;int&amp;gt;, new_sp_f1524 &amp;lt;int&amp;gt;, new_sp_f2534 &amp;lt;int&amp;gt;,
## #   new_sp_f3544 &amp;lt;int&amp;gt;, new_sp_f4554 &amp;lt;int&amp;gt;, new_sp_f5564 &amp;lt;int&amp;gt;,
## #   new_sp_f65 &amp;lt;int&amp;gt;, new_sn_m014 &amp;lt;int&amp;gt;, new_sn_m1524 &amp;lt;int&amp;gt;,
## #   new_sn_m2534 &amp;lt;int&amp;gt;, new_sn_m3544 &amp;lt;int&amp;gt;, new_sn_m4554 &amp;lt;int&amp;gt;,
## #   new_sn_m5564 &amp;lt;int&amp;gt;, new_sn_m65 &amp;lt;int&amp;gt;, new_sn_f014 &amp;lt;int&amp;gt;,
## #   new_sn_f1524 &amp;lt;int&amp;gt;, new_sn_f2534 &amp;lt;int&amp;gt;, new_sn_f3544 &amp;lt;int&amp;gt;,
## #   new_sn_f4554 &amp;lt;int&amp;gt;, new_sn_f5564 &amp;lt;int&amp;gt;, new_sn_f65 &amp;lt;int&amp;gt;,
## #   new_ep_m014 &amp;lt;int&amp;gt;, new_ep_m1524 &amp;lt;int&amp;gt;, new_ep_m2534 &amp;lt;int&amp;gt;,
## #   new_ep_m3544 &amp;lt;int&amp;gt;, new_ep_m4554 &amp;lt;int&amp;gt;, new_ep_m5564 &amp;lt;int&amp;gt;,
## #   new_ep_m65 &amp;lt;int&amp;gt;, new_ep_f014 &amp;lt;int&amp;gt;, new_ep_f1524 &amp;lt;int&amp;gt;,
## #   new_ep_f2534 &amp;lt;int&amp;gt;, new_ep_f3544 &amp;lt;int&amp;gt;, new_ep_f4554 &amp;lt;int&amp;gt;,
## #   new_ep_f5564 &amp;lt;int&amp;gt;, new_ep_f65 &amp;lt;int&amp;gt;, newrel_m014 &amp;lt;int&amp;gt;,
## #   newrel_m1524 &amp;lt;int&amp;gt;, newrel_m2534 &amp;lt;int&amp;gt;, newrel_m3544 &amp;lt;int&amp;gt;,
## #   newrel_m4554 &amp;lt;int&amp;gt;, newrel_m5564 &amp;lt;int&amp;gt;, newrel_m65 &amp;lt;int&amp;gt;,
## #   newrel_f014 &amp;lt;int&amp;gt;, newrel_f1524 &amp;lt;int&amp;gt;, newrel_f2534 &amp;lt;int&amp;gt;,
## #   newrel_f3544 &amp;lt;int&amp;gt;, newrel_f4554 &amp;lt;int&amp;gt;, newrel_f5564 &amp;lt;int&amp;gt;,
## #   newrel_f65 &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It contains redundant columns odd variable codes, and many missing values. In short, who is messy, and we’ll need multiple steps to tidy it.&lt;/p&gt;
&lt;p&gt;The best place to start is almost always to gather together the columns that are not variables. Let’s have a look at what we’ve got:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It looks like &lt;code&gt;country&lt;/code&gt;, &lt;code&gt;iso2&lt;/code&gt;, and &lt;code&gt;iso3&lt;/code&gt; are three variables that redundantly specify the country.&lt;/li&gt;
&lt;li&gt;year is clearly also a variable.&lt;/li&gt;
&lt;li&gt;We don’t know what all the other columns are yet, but given the structure in the variable names (e.g., &lt;code&gt;new_sp_m014&lt;/code&gt;, &lt;code&gt;new_ep_m014&lt;/code&gt;, &lt;code&gt;new_ep_f014&lt;/code&gt;) these are likely to be values, not variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we need to gather together all the columns from &lt;code&gt;new_sp_m014&lt;/code&gt; to &lt;code&gt;newrel_f65&lt;/code&gt;. We don’t know what those values represent yet, so we’ll give them the generic name &lt;code&gt;&amp;quot;key&amp;quot;&lt;/code&gt;. We know the cells represent the count of cases, so we’ll use the variable &lt;code&gt;cases&lt;/code&gt;. There are a lot of missing values in the current representation, so for now we’ll use &lt;code&gt;na.rm&lt;/code&gt; just so we can focus on the values that are present:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;who1 &amp;lt;- who %&amp;gt;%
          gather(new_sp_m014:newrel_f65,
                 key = &amp;quot;key&amp;quot;, value = &amp;quot;cases&amp;quot;,  na.rm = TRUE)

who1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 76,046 x 6
##    country     iso2  iso3   year key         cases
##  * &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt;
##  1 Afghanistan AF    AFG    1997 new_sp_m014     0
##  2 Afghanistan AF    AFG    1998 new_sp_m014    30
##  3 Afghanistan AF    AFG    1999 new_sp_m014     8
##  4 Afghanistan AF    AFG    2000 new_sp_m014    52
##  5 Afghanistan AF    AFG    2001 new_sp_m014   129
##  6 Afghanistan AF    AFG    2002 new_sp_m014    90
##  7 Afghanistan AF    AFG    2003 new_sp_m014   127
##  8 Afghanistan AF    AFG    2004 new_sp_m014   139
##  9 Afghanistan AF    AFG    2005 new_sp_m014   151
## 10 Afghanistan AF    AFG    2006 new_sp_m014   193
## # ... with 76,036 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can get some hint of the structure of the values in the new key column by counting them:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;who1 %&amp;gt;%
  count(key)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 56 x 2
##    key              n
##    &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt;
##  1 new_ep_f014   1032
##  2 new_ep_f1524  1021
##  3 new_ep_f2534  1021
##  4 new_ep_f3544  1021
##  5 new_ep_f4554  1017
##  6 new_ep_f5564  1017
##  7 new_ep_f65    1014
##  8 new_ep_m014   1038
##  9 new_ep_m1524  1026
## 10 new_ep_m2534  1020
## # ... with 46 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data dictionary tells us: 1. The first three letters of each column denote whether the column contains new or old cases of TB. In this dataset, each column contains new cases. 2. The next two letters describe the type of TB: i) &lt;code&gt;rel&lt;/code&gt; stands for cases of relapse. ii) &lt;code&gt;ep&lt;/code&gt; stands for cases of extrapulmonary TB. iii) &lt;code&gt;sn&lt;/code&gt; stands for cases of pulmonary TB that could not be diagnosed by a pulmonary smear (smear negative). iv) &lt;code&gt;sp&lt;/code&gt; stands for cases of pulmonary TB that could be diagnosed be a pulmonary smear (smear positive). 3. The sixth letter gives the sex of TB patients. The dataset groups cases by males (m) and females (f). 4. The remaining numbers give the age group. The dataset groups cases into seven age groups: i) 014 = 0-14 years old ii) 1524 = 15-24 years old iii) 2534 = 25-34 years old iv) 3544 = 35-44 years old v) 4554 = 45-54 years old vi) 5564 = 55-64 years old vii) 65 = 65 or older&lt;/p&gt;
&lt;p&gt;We are fixing a minor mistake here: inconsistent column name between &lt;code&gt;newrel&lt;/code&gt; and &lt;code&gt;new_rel&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;who2 &amp;lt;- who1 %&amp;gt;%
  mutate(key = stringr::str_replace(key, &amp;quot;newrel&amp;quot;, &amp;quot;new_rel&amp;quot;))
who2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 76,046 x 6
##    country     iso2  iso3   year key         cases
##    &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt;
##  1 Afghanistan AF    AFG    1997 new_sp_m014     0
##  2 Afghanistan AF    AFG    1998 new_sp_m014    30
##  3 Afghanistan AF    AFG    1999 new_sp_m014     8
##  4 Afghanistan AF    AFG    2000 new_sp_m014    52
##  5 Afghanistan AF    AFG    2001 new_sp_m014   129
##  6 Afghanistan AF    AFG    2002 new_sp_m014    90
##  7 Afghanistan AF    AFG    2003 new_sp_m014   127
##  8 Afghanistan AF    AFG    2004 new_sp_m014   139
##  9 Afghanistan AF    AFG    2005 new_sp_m014   151
## 10 Afghanistan AF    AFG    2006 new_sp_m014   193
## # ... with 76,036 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we separate the &lt;strong&gt;key&lt;/strong&gt; into several columns by seperator _ :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;who3 &amp;lt;- who2 %&amp;gt;%
  separate(key, c(&amp;quot;new&amp;quot;, &amp;quot;type&amp;quot;, &amp;quot;sexage&amp;quot;), sep = &amp;quot;_&amp;quot;)
who3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 76,046 x 8
##    country     iso2  iso3   year new   type  sexage cases
##    &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
##  1 Afghanistan AF    AFG    1997 new   sp    m014       0
##  2 Afghanistan AF    AFG    1998 new   sp    m014      30
##  3 Afghanistan AF    AFG    1999 new   sp    m014       8
##  4 Afghanistan AF    AFG    2000 new   sp    m014      52
##  5 Afghanistan AF    AFG    2001 new   sp    m014     129
##  6 Afghanistan AF    AFG    2002 new   sp    m014      90
##  7 Afghanistan AF    AFG    2003 new   sp    m014     127
##  8 Afghanistan AF    AFG    2004 new   sp    m014     139
##  9 Afghanistan AF    AFG    2005 new   sp    m014     151
## 10 Afghanistan AF    AFG    2006 new   sp    m014     193
## # ... with 76,036 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s found at below that the &lt;code&gt;new&lt;/code&gt; column is redundant because they are all the same:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;who3 %&amp;gt;%
  count(new)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   new       n
##   &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
## 1 new   76046&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition, &lt;code&gt;iso2&lt;/code&gt; and &lt;code&gt;iso3&lt;/code&gt; is redundant because it is tied to country name. We can show that by counting the occurences of unique combination of &lt;code&gt;country&lt;/code&gt;, &lt;code&gt;iso2&lt;/code&gt;, and &lt;code&gt;iso3&lt;/code&gt;; if the occurences is not more than one, then &lt;code&gt;iso&lt;/code&gt; are uniwue for each country:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;who3 %&amp;gt;%
  select(country, iso2, iso3) %&amp;gt;%
  distinct() %&amp;gt;%
  group_by(country) %&amp;gt;% 
  filter(n()&amp;gt;1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 0 x 3
## # Groups:   country [0]
## # ... with 3 variables: country &amp;lt;chr&amp;gt;, iso2 &amp;lt;chr&amp;gt;, iso3 &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s drop the &lt;code&gt;new&lt;/code&gt; column alongside with &lt;code&gt;iso2&lt;/code&gt; and &lt;code&gt;iso3&lt;/code&gt; since they’re redundant:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;who4 &amp;lt;- who3 %&amp;gt;%
  select(-new, - iso2, -iso3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we separate &lt;code&gt;sex&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; from &lt;code&gt;sexage&lt;/code&gt; by splitting after the first character:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;who5 &amp;lt;- who4%&amp;gt;%
  separate(sexage, into = c(&amp;quot;sex&amp;quot;, &amp;quot;age&amp;quot;), sep = 1)
who5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 76,046 x 6
##    country      year type  sex   age   cases
##    &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
##  1 Afghanistan  1997 sp    m     014       0
##  2 Afghanistan  1998 sp    m     014      30
##  3 Afghanistan  1999 sp    m     014       8
##  4 Afghanistan  2000 sp    m     014      52
##  5 Afghanistan  2001 sp    m     014     129
##  6 Afghanistan  2002 sp    m     014      90
##  7 Afghanistan  2003 sp    m     014     127
##  8 Afghanistan  2004 sp    m     014     139
##  9 Afghanistan  2005 sp    m     014     151
## 10 Afghanistan  2006 sp    m     014     193
## # ... with 76,036 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dataset is tidy now!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;nontidy-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Nontidy Data&lt;/h1&gt;
&lt;p&gt;There are lots of useful and well-founded data structures that are not tidy data. There are two main reasons to use other data structures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alternative representations may have substantial performance or space advantages.&lt;/li&gt;
&lt;li&gt;Specialized fields have evolved their own conventions for storing data that may be quite different to the conventions of tidy data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tidy data should be your choice if your data fits into rectangular structure.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Import with readr</title>
      <link>/readings/data-import-with-readr/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/readings/data-import-with-readr/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-basics&#34;&gt;The Basics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#reading-a-csv-file&#34;&gt;Reading a csv file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#supply-inline-csv&#34;&gt;Supply inline csv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dropping-entries-automatically&#34;&gt;Dropping entries automatically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#insert-na-automatically&#34;&gt;Insert NA automatically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#numeric-vs-characters-type-priority&#34;&gt;Numeric vs Characters type priority&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skipping-first-n-lines-with-skip&#34;&gt;Skipping first &lt;code&gt;n&lt;/code&gt; lines with &lt;code&gt;skip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skipping-comments-using-comment-to-drop-all-lines-that-start-with-e.g.-.&#34;&gt;Skipping comments using &lt;code&gt;comment = &amp;quot;#&amp;quot;&lt;/code&gt; to drop all lines that start with (e.g.) &lt;code&gt;#&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#import-data-without-column-names-using-col_names-false&#34;&gt;Import data without column names using &lt;code&gt;col_names = FALSE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#passing-a-character-vector-as-column-names&#34;&gt;Passing a character vector as column names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#specifying-values-for-missing-value-using-na&#34;&gt;Specifying values for missing value using &lt;code&gt;na =&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#changing-quoting-character-in-read_csv-using-quote&#34;&gt;Changing quoting character in &lt;code&gt;read_csv&lt;/code&gt; using &lt;code&gt;quote&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#similar-arguments-between-read_csv-and-read_tsv&#34;&gt;Similar arguments between &lt;code&gt;read_csv()&lt;/code&gt; and &lt;code&gt;read_tsv()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compared-to-base-r&#34;&gt;Compared to Base R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parsing-a-vector&#34;&gt;Parsing a Vector&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#number&#34;&gt;Number&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#use-locale-decimal_mark-to-solve-different-decimal-marks&#34;&gt;Use &lt;code&gt;locale (decimal_mark = )&lt;/code&gt; to solve different decimal marks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#use-parse_number-to-ignore-nonnumeric-characters-before-and-after-the-number&#34;&gt;Use &lt;code&gt;parse_number&lt;/code&gt; to ignore nonnumeric characters before and after the number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#use-locale-and-parse_number-to-remove-grouping-marks&#34;&gt;Use &lt;code&gt;locale&lt;/code&gt; and &lt;code&gt;parse_number()&lt;/code&gt; to remove grouping marks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#relationship-between-decimal_mark-and-grouping_mark&#34;&gt;Relationship between &lt;code&gt;decimal_mark&lt;/code&gt; and &lt;code&gt;grouping_mark&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#string&#34;&gt;String&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#set-string-encoding-using-localeencoding&#34;&gt;Set string encoding using &lt;code&gt;locale(encoding = )&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#guess-text-encoding-using-guess_encoding&#34;&gt;Guess text encoding using &lt;code&gt;guess_encoding()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#common-encodings-in-europe-and-asia&#34;&gt;Common encodings in Europe and Asia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#factors&#34;&gt;Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dates-date-times-and-times&#34;&gt;Dates, Date-Times, and Times&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-parsing-with-parse_datetime-parse_date-and-parse_time&#34;&gt;Basic parsing with &lt;code&gt;parse_datetime&lt;/code&gt;, &lt;code&gt;parse_date&lt;/code&gt; and &lt;code&gt;parse_time&lt;/code&gt;,&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#own-date-time-format&#34;&gt;Own date-time format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#built-in-non-english-month-names-with-localedate_names&#34;&gt;Built-in Non-English month names with &lt;code&gt;locale(date_names =  )&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#customize-date-and-month-names-using-date_names&#34;&gt;Customize date and month names using &lt;code&gt;date_names&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parsing-a-file&#34;&gt;Parsing a File&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#strategy-used-by-readr&#34;&gt;Strategy used by &lt;strong&gt;readr&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#problems-of-default-file-parsing&#34;&gt;Problems of default file parsing&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#overwrite-the-default-file-parsing-specification&#34;&gt;Overwrite the default file parsing specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-strategies-to-parse-files&#34;&gt;Other Strategies to parse files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#writing-to-a-file&#34;&gt;Writing to a File&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#write-to-csv-file&#34;&gt;Write to csv file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#alternative-file-writing-methods-that-preserve-data-type&#34;&gt;Alternative file writing methods that preserve data type&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-types-of-data&#34;&gt;Other Types of Data&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#rectangular-data&#34;&gt;Rectangular data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hierarchical-data&#34;&gt;Hierarchical Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;** This post is heavily based on &lt;a href=&#34;http://r4ds.had.co.nz/&#34;&gt;R for Data Science&lt;/a&gt;. Please consider to buy that book if you find this post useful.**&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;readr&lt;/strong&gt; package is part of the &lt;strong&gt;tidyverse&lt;/strong&gt; package.&lt;/p&gt;
&lt;div id=&#34;the-basics&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The Basics&lt;/h1&gt;
&lt;p&gt;Most of &lt;strong&gt;readr&lt;/strong&gt;’s functions are concerned with turning flat files into data frames:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read_csv()&lt;/code&gt; reads comma-delimited files, &lt;code&gt;read_csv2()&lt;/code&gt; reads semicolon-separated files (common in countries where ; is used as the decimal place), &lt;code&gt;read_tsv()&lt;/code&gt; reads tab-delimited files, and &lt;code&gt;read_delim()&lt;/code&gt; reads in files with any delimiter.
&lt;ul&gt;
&lt;li&gt;For example, &lt;code&gt;read_delim(file, delim = &amp;quot;|&amp;quot;)&lt;/code&gt; reads a file where fields are separated with “|”.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_fwf()&lt;/code&gt; reads fixed-width files. You can specify fields either by their widths with &lt;code&gt;fwf_widths()&lt;/code&gt; or their position with &lt;code&gt;fwf_positions()&lt;/code&gt;. &lt;code&gt;read_table()&lt;/code&gt; reads a common variation of fixed-width files where columns are separated by white space.
&lt;ul&gt;
&lt;li&gt;The most important argument to &lt;code&gt;read_fwf&lt;/code&gt; which reads “fixed-width formats”, is &lt;code&gt;col_positions&lt;/code&gt; which tells the function where data columns begin and end.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_log()&lt;/code&gt; reads Apache style log files. (But also check out &lt;strong&gt;webreadr&lt;/strong&gt;, which is built on top of &lt;code&gt;read_log()&lt;/code&gt; and provides many more helpful tools.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These functions all have similar syntax: once you’ve mastered one, you can use the others with ease.&lt;/p&gt;
&lt;div id=&#34;reading-a-csv-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reading a csv file&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;read_csv()&lt;/code&gt; function will be used as examples. The first argument to read_csv() is the most important; it’s the path to the file to read:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;heights &amp;lt;- read_csv(&amp;quot;data/heights.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: &amp;#39;data/heights.csv&amp;#39; does not exist in current working directory (&amp;#39;C:/Users/mirac/Desktop/Work/acadblog2/content/readings&amp;#39;).&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;supply-inline-csv&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Supply inline csv&lt;/h2&gt;
&lt;p&gt;You can also supply an inline CSV file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_csv(&amp;quot;a,b,c
  1,2,3
  4,5,6&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##       a     b     c
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     2     3
## 2     4     5     6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pay attention that the entries start and end with &lt;code&gt;&amp;quot;  &amp;quot;&lt;/code&gt;. In both cases &lt;code&gt;read_csv()&lt;/code&gt; uses the first line of the data for the column names, which is a very common convention.&lt;/p&gt;
&lt;div id=&#34;dropping-entries-automatically&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dropping entries automatically&lt;/h3&gt;
&lt;p&gt;Besides, &lt;code&gt;read_csv&lt;/code&gt; automatically drops entries that do not have a column name.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_csv(&amp;quot;a,b\n1,2,3\n4,5,6&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 2
##       a     b
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     2
## 2     4     5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;insert-na-automatically&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Insert NA automatically&lt;/h3&gt;
&lt;p&gt;It also insert NA (missing values) to cell where an expected entry wasn’t entered.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_csv(&amp;quot;a,b,c\n1,2\n1,2,3,4&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##       a     b     c
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     2    NA
## 2     1     2     3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The numbers of columns in the data do not match the number of columns in the header (three). In row one, there are only two values, so column &lt;code&gt;c&lt;/code&gt; is set to missing. In row two, there is an extra value, and that value is dropped.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;numeric-vs-characters-type-priority&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Numeric vs Characters type priority&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_csv(&amp;quot;a,b\n1,2\na,b&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 2
##   a     b    
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 1     2    
## 2 a     b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both “a” and “b” are treated as character vectors since they contain non-numeric strings.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;skipping-first-n-lines-with-skip&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Skipping first &lt;code&gt;n&lt;/code&gt; lines with &lt;code&gt;skip&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes there are a few lines of metadata at the top of the file. You can use &lt;code&gt;skip = n&lt;/code&gt; to skip the first &lt;code&gt;n&lt;/code&gt; lines.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_csv(&amp;quot;The first line of metadata
  The second line of metadata
  x,y,z
  1,2,3&amp;quot;, skip = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##       x     y     z
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     2     3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;skipping-comments-using-comment-to-drop-all-lines-that-start-with-e.g.-.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Skipping comments using &lt;code&gt;comment = &amp;quot;#&amp;quot;&lt;/code&gt; to drop all lines that start with (e.g.) &lt;code&gt;#&lt;/code&gt;.&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_csv(&amp;quot;# A comment I want to skip
  x,y,z
  1,2,3&amp;quot;, comment = &amp;quot;#&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##       x     y     z
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     2     3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;import-data-without-column-names-using-col_names-false&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Import data without column names using &lt;code&gt;col_names = FALSE&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The data might not have column names. You can use &lt;code&gt;col_names = FALSE&lt;/code&gt; to tell &lt;code&gt;read_csv()&lt;/code&gt; not to treat the first row as headings, and instead label them sequentially from &lt;code&gt;X1&lt;/code&gt; to &lt;code&gt;Xn&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_csv(&amp;quot;1,2,3\n4,5,6&amp;quot;, col_names = FALSE)  ## \n is newline&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##      X1    X2    X3
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     2     3
## 2     4     5     6&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;passing-a-character-vector-as-column-names&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Passing a character vector as column names&lt;/h2&gt;
&lt;p&gt;Note that the column names are passed as characters or strings:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_csv(&amp;quot;1,2,3\n4,5,6&amp;quot;, col_names = c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;z&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##       x     y     z
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     2     3
## 2     4     5     6&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;specifying-values-for-missing-value-using-na&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Specifying values for missing value using &lt;code&gt;na =&lt;/code&gt;&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_csv(&amp;quot;a,b,c\n1,2,.&amp;quot;, na = &amp;quot;.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##       a     b c    
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
## 1     1     2 &amp;lt;NA&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;changing-quoting-character-in-read_csv-using-quote&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Changing quoting character in &lt;code&gt;read_csv&lt;/code&gt; using &lt;code&gt;quote&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes strings in a CSV file contain commas. To prevent them from causing problems they need to be surrounded by a quoting character, like &amp;quot; or ’. By convention, &lt;code&gt;read_csv()&lt;/code&gt; assumes that the quoting character will be “, and if you want to change it you’ll need to use &lt;code&gt;read_delim()&lt;/code&gt; instead. You need to specify the &lt;code&gt;quote&lt;/code&gt; argument to read the following text in variable &lt;strong&gt;x&lt;/strong&gt; into a data frame using &lt;code&gt;read_csv&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- &amp;quot;x,y\n1,&amp;#39;a,b&amp;#39;&amp;quot;

read_delim(file = x, delim = &amp;quot;,&amp;quot;, quote = &amp;quot;&amp;#39;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##       x y    
##   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
## 1     1 a,b&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;similar-arguments-between-read_csv-and-read_tsv&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Similar arguments between &lt;code&gt;read_csv()&lt;/code&gt; and &lt;code&gt;read_tsv()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;They have the following arguments in common:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;union(names(formals(read_csv)), names(formals(read_tsv)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;file&amp;quot;      &amp;quot;col_names&amp;quot; &amp;quot;col_types&amp;quot; &amp;quot;locale&amp;quot;    &amp;quot;na&amp;quot;       
##  [6] &amp;quot;quoted_na&amp;quot; &amp;quot;quote&amp;quot;     &amp;quot;comment&amp;quot;   &amp;quot;trim_ws&amp;quot;   &amp;quot;skip&amp;quot;     
## [11] &amp;quot;n_max&amp;quot;     &amp;quot;guess_max&amp;quot; &amp;quot;progress&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;col_names&lt;/code&gt; and &lt;code&gt;col_types&lt;/code&gt; are used to specify the column names and how to parse the columns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locale&lt;/code&gt; is important for determining things like the encoding and whether “.” or “,” is used as a decimal mark.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;na&lt;/code&gt; and &lt;code&gt;quoted_na&lt;/code&gt; control which strings are treated as missing values when parsing vectors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trim_ws&lt;/code&gt; trims whitespace before and after cells before parsing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_max&lt;/code&gt; sets how many rows to read&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guess_max&lt;/code&gt; sets how many rows to use when guessing the column type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;progress&lt;/code&gt; determines whether a progress bar is shown.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;compared-to-base-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Compared to Base R&lt;/h1&gt;
&lt;p&gt;The Base R provides &lt;code&gt;read.csv&lt;/code&gt; instead of &lt;code&gt;read_csv&lt;/code&gt;, which is from the &lt;strong&gt;readr&lt;/strong&gt; package. There are a few good reasons to favor &lt;strong&gt;readr&lt;/strong&gt; functions over the base equivalents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They are faster. Long-running jobs have a progress bar, so you can see what’s happening. &lt;code&gt;data.table::fread()&lt;/code&gt; doesn’t fit quite so well into the tidyverse, but it can be quite a bit faster.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;They produce tibbles, and they don’t convert character vectors to factors, use row names, or munge the column names.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;They are more reproducible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;parsing-a-vector&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Parsing a Vector&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;parse_*()&lt;/code&gt; functions take a character vector and return a more specialized vector like a logical, integer, or date:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(parse_logical(c(&amp;quot;TRUE&amp;quot;, &amp;quot;FALSE&amp;quot;, &amp;quot;NA&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  logi [1:3] TRUE FALSE NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(parse_integer(c(&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  int [1:3] 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(parse_date(c(&amp;quot;2010-01-01&amp;quot;, &amp;quot;1979-10-14&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Date[1:2], format: &amp;quot;2010-01-01&amp;quot; &amp;quot;1979-10-14&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_integer(c(&amp;quot;1&amp;quot;, &amp;quot;231&amp;quot;, &amp;quot;.&amp;quot;, &amp;quot;456&amp;quot;), na = &amp;quot;.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]   1 231  NA 456&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;If parsing fails, you’ll get a warning, and the failures will be missing in the output:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- parse_integer(c(&amp;quot;123&amp;quot;, &amp;quot;345&amp;quot;, &amp;quot;abc&amp;quot;, &amp;quot;123.45&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in rbind(names(probs), probs_f): number of columns of result is not
## a multiple of vector length (arg 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: 2 parsing failures.
## row # A tibble: 2 x 4 col     row   col expected               actual expected   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;  actual 1     3    NA an integer             abc    row 2     4    NA no trailing characters .45&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 123 345  NA  NA
## attr(,&amp;quot;problems&amp;quot;)
## # A tibble: 2 x 4
##     row   col expected               actual
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt; 
## 1     3    NA an integer             abc   
## 2     4    NA no trailing characters .45&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there are many parsing failures, you’ll need to use &lt;code&gt;problems()&lt;/code&gt; to get the complete set. This returns a tibble, which you can then manipulate with &lt;strong&gt;dplyr&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;problems(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 4
##     row   col expected               actual
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt; 
## 1     3    NA an integer             abc   
## 2     4    NA no trailing characters .45&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are eight particularly important parsers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parse_logical()&lt;/code&gt; and &lt;code&gt;parse_integer()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_double()&lt;/code&gt; is a strict numeric parser, and &lt;code&gt;parse_number()&lt;/code&gt; is a flexible numeric parser.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_character()&lt;/code&gt;. Character Encodings make it complicatd.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_factor()&lt;/code&gt; creates factors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_datetime()&lt;/code&gt;, &lt;code&gt;parse_date()&lt;/code&gt;, and &lt;code&gt;parse_time()&lt;/code&gt; allow you to parse various date and time specifications. These are the most complicated because there are so many different ways of writing dates.&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;locale&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Locale&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;locale&lt;/code&gt; broadly controls the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;date and time formats: &lt;code&gt;date_names&lt;/code&gt;, &lt;code&gt;date_format&lt;/code&gt;, and &lt;code&gt;time_format&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;time_zone: &lt;code&gt;tz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;numbers: &lt;code&gt;decimal_mark&lt;/code&gt;, &lt;code&gt;grouping_mark&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;encoding: &lt;code&gt;encoding&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;number&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Number&lt;/h2&gt;
&lt;div id=&#34;use-locale-decimal_mark-to-solve-different-decimal-marks&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Use &lt;code&gt;locale (decimal_mark = )&lt;/code&gt; to solve different decimal marks&lt;/h3&gt;
&lt;p&gt;People write numbers differently in different parts of the world. For example, some countries use &lt;strong&gt;.&lt;/strong&gt; in between the integer and fractional parts of a real number, while others use &lt;strong&gt;,&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;locale&lt;/code&gt; is an object that specifies parsing options that differ from place to place. You can override the default value of &lt;strong&gt;.&lt;/strong&gt; by creating a new &lt;code&gt;locale&lt;/code&gt; and setting the &lt;code&gt;decimal_mark&lt;/code&gt; argument:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_double(&amp;quot;1.23&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.23&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_double(&amp;quot;1,23&amp;quot;, locale = locale(decimal_mark = &amp;quot;,&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.23&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;use-parse_number-to-ignore-nonnumeric-characters-before-and-after-the-number&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Use &lt;code&gt;parse_number&lt;/code&gt; to ignore nonnumeric characters before and after the number&lt;/h3&gt;
&lt;p&gt;Numbers are often surrounded by other characters that provide some context, like “$1000” or “10%”. We would want to remove those “context characters” in these cases:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_number(&amp;quot;$100&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 100&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_number(&amp;quot;20%&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 20&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_number(&amp;quot;It cost $123.45&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 123.45&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;parse_number&lt;/code&gt; only looks for the first occurence of number. For example, the following only returns 100.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_number(&amp;quot;$100 and $5000&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 100&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;use-locale-and-parse_number-to-remove-grouping-marks&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Use &lt;code&gt;locale&lt;/code&gt; and &lt;code&gt;parse_number()&lt;/code&gt; to remove grouping marks&lt;/h3&gt;
&lt;p&gt;Numbers often contain “grouping” characters to make them easier to read, like “1,000,000”, and these grouping characters vary around the world.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Used in America
parse_number(&amp;quot;$123,456,789&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 123456789&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Used in many parts of Europe
parse_number(
&amp;quot;123.456.789&amp;quot;,
locale = locale(grouping_mark = &amp;quot;.&amp;quot;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 123456789&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Used in Switzerland
parse_number(
&amp;quot;123&amp;#39;456&amp;#39;789&amp;quot;,
locale = locale(grouping_mark = &amp;quot;&amp;#39;&amp;quot;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 123456789&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;relationship-between-decimal_mark-and-grouping_mark&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Relationship between &lt;code&gt;decimal_mark&lt;/code&gt; and &lt;code&gt;grouping_mark&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If the decimal and grouping marks are set to the same character, &lt;code&gt;locale&lt;/code&gt; throws an error:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;locale(decimal_mark = &amp;quot;.&amp;quot;, grouping_mark = &amp;quot;.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: `decimal_mark` and `grouping_mark` must be different&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the &lt;code&gt;decimal_mark&lt;/code&gt; is set to the comma “,”, then the &lt;code&gt;grouping_mark&lt;/code&gt; is set to the period “.”:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;locale()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;locale&amp;gt;
## Numbers:  123,456.78
## Formats:  %AD / %AT
## Timezone: UTC
## Encoding: UTF-8
## &amp;lt;date_names&amp;gt;
## Days:   Sunday (Sun), Monday (Mon), Tuesday (Tue), Wednesday (Wed),
##         Thursday (Thu), Friday (Fri), Saturday (Sat)
## Months: January (Jan), February (Feb), March (Mar), April (Apr), May
##         (May), June (Jun), July (Jul), August (Aug), September
##         (Sep), October (Oct), November (Nov), December (Dec)
## AM/PM:  AM/PM&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## NUmbers: 123,456.78 means that the grouping_marks is &amp;#39;,&amp;#39; and the decimal marks is &amp;#39;.&amp;#39;

locale(decimal_mark = &amp;quot;,&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;locale&amp;gt;
## Numbers:  123.456,78
## Formats:  %AD / %AT
## Timezone: UTC
## Encoding: UTF-8
## &amp;lt;date_names&amp;gt;
## Days:   Sunday (Sun), Monday (Mon), Tuesday (Tue), Wednesday (Wed),
##         Thursday (Thu), Friday (Fri), Saturday (Sat)
## Months: January (Jan), February (Feb), March (Mar), April (Apr), May
##         (May), June (Jun), July (Jul), August (Aug), September
##         (Sep), October (Oct), November (Nov), December (Dec)
## AM/PM:  AM/PM&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Pay attention to the difference between &amp;#39;.&amp;#39; and &amp;#39;,&amp;#39; next to NUmbers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the &lt;code&gt;grouping_mark&lt;/code&gt; is set to a period, then the &lt;code&gt;decimal_mark&lt;/code&gt; is set to a comma:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;locale(grouping_mark = &amp;quot;.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;locale&amp;gt;
## Numbers:  123.456,78
## Formats:  %AD / %AT
## Timezone: UTC
## Encoding: UTF-8
## &amp;lt;date_names&amp;gt;
## Days:   Sunday (Sun), Monday (Mon), Tuesday (Tue), Wednesday (Wed),
##         Thursday (Thu), Friday (Fri), Saturday (Sat)
## Months: January (Jan), February (Feb), March (Mar), April (Apr), May
##         (May), June (Jun), July (Jul), August (Aug), September
##         (Sep), October (Oct), November (Nov), December (Dec)
## AM/PM:  AM/PM&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;string&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;String&lt;/h2&gt;
&lt;div id=&#34;set-string-encoding-using-localeencoding&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Set string encoding using &lt;code&gt;locale(encoding = )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Today there is one standard that is supported almost everywhere: UTF-8. &lt;strong&gt;readr&lt;/strong&gt; uses UTF-8 everywhere: it assumes your data is UTF-8 encoded when you read it, and always uses it when writing. This is a good default, but will fail for data produced by older systems that don’t understand UTF-8. If this happens to you, your strings will look weird when you print them. For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x1 &amp;lt;- &amp;quot;El Ni\xf1o was particularly bad this year&amp;quot;
x2 &amp;lt;- &amp;quot;\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix the problem you need to specify the encoding in &lt;code&gt;locale&lt;/code&gt; of &lt;code&gt;parse_character()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_character(x1, locale = locale(encoding = &amp;quot;Latin1&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;El Niño was particularly bad this year&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_character(x2, locale = locale(encoding = &amp;quot;Shift-JIS&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;lt;U+3053&amp;gt;&amp;lt;U+3093&amp;gt;&amp;lt;U+306B&amp;gt;&amp;lt;U+3061&amp;gt;&amp;lt;U+306F&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;guess-text-encoding-using-guess_encoding&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Guess text encoding using &lt;code&gt;guess_encoding()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;readr&lt;/strong&gt; provides &lt;code&gt;guess_encoding()&lt;/code&gt; to help you figure it out which is the correct encoding to be used. The first argument to &lt;code&gt;guess_encoding()&lt;/code&gt; can either be a path to a file, or, as in this case, a raw vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;guess_encoding(charToRaw(x1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 2
##   encoding   confidence
##   &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;
## 1 ISO-8859-1      0.460
## 2 ISO-8859-9      0.230&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;guess_encoding(charToRaw(x2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   encoding confidence
##   &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;
## 1 KOI8-R        0.420&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In R, &lt;code&gt;charToRaw()&lt;/code&gt; get us the underlying representation of a string in a computer:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;charToRaw(&amp;quot;Hadley&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 48 61 64 6c 65 79&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;common-encodings-in-europe-and-asia&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Common encodings in Europe and Asia&lt;/h3&gt;
&lt;p&gt;UTF-8 is standard now, and ASCII has been around forever.&lt;/p&gt;
&lt;p&gt;For the European languages, there are separate encodings for Romance languages and Eastern European languages using Latin script, Cyrillic, Greek, Hebrew, Turkish: usually with separate ISO and Windows encoding standards. There is also Mac OS Roman.&lt;/p&gt;
&lt;p&gt;For Asian languages Arabic and Vietnamese have ISO and Windows standards. The other major Asian scripts have their own:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Japanese: JIS X 0208, Shift JIS, ISO-2022-JP&lt;/li&gt;
&lt;li&gt;Chinese: GB 2312, GBK, GB 18030&lt;/li&gt;
&lt;li&gt;Korean: KS X 1001, EUC-KR, ISO-2022-KR&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list in the documentation for &lt;code&gt;stringi::stri_enc_detect&lt;/code&gt; is a good list of encodings since it supports the most common encodings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Western European Latin script languages: ISO-8859-1, Windows-1250 (also CP-1250 for code-point)&lt;/li&gt;
&lt;li&gt;Eastern European Latin script languages: ISO-8859-2, Windows-1252&lt;/li&gt;
&lt;li&gt;Greek: ISO-8859-7&lt;/li&gt;
&lt;li&gt;Turkish: ISO-8859-9, Windows-1254&lt;/li&gt;
&lt;li&gt;Hebrew: ISO-8859-8, IBM424, Windows 1255&lt;/li&gt;
&lt;li&gt;Russian: Windows 1251&lt;/li&gt;
&lt;li&gt;Japanese: Shift JIS, ISO-2022-JP, EUC-JP&lt;/li&gt;
&lt;li&gt;Korean: ISO-2022-KR, EUC-KR&lt;/li&gt;
&lt;li&gt;Chinese: GB18030, ISO-2022-CN (Simplified), Big5 (Traditional)&lt;/li&gt;
&lt;li&gt;Arabic: ISO-8859-6, IBM420, Windows 1256&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information on character encodings see the following sources.&lt;/p&gt;
&lt;p&gt;Programs that identify the encoding of text include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;guess_encoding&lt;/code&gt; in the &lt;strong&gt;reader&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_enc_detect&lt;/code&gt; in the &lt;strong&gt;stringi&lt;/strong&gt; package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;factors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Factors&lt;/h2&gt;
&lt;p&gt;R uses factors to represent categorical variables that have a known set of possible values. Give &lt;code&gt;parse_factor()&lt;/code&gt; a vector of known levels to generate a warning whenever an unexpected value is present:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fruit &amp;lt;- c(&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;)
parse_factor(c(&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;bananana&amp;quot;), levels = fruit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: 1 parsing failure.
## row # A tibble: 1 x 4 col     row   col expected           actual   expected   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;    actual 1     3    NA value in level set bananana&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] apple  banana &amp;lt;NA&amp;gt;  
## attr(,&amp;quot;problems&amp;quot;)
## # A tibble: 1 x 4
##     row   col expected           actual  
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;   
## 1     3    NA value in level set bananana
## Levels: apple banana&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, &lt;code&gt;bananana&lt;/code&gt; is not listed in the &lt;code&gt;fruit&lt;/code&gt;; an error messaege appears because of that.&lt;/p&gt;
&lt;p&gt;But if you have many problematic entries, it’s often easier to leave them as character vectors and then use the different tools in from package &lt;strong&gt;stringr&lt;/strong&gt; and &lt;strong&gt;forcats&lt;/strong&gt; to clean them up.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dates-date-times-and-times&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Dates, Date-Times, and Times&lt;/h2&gt;
&lt;div id=&#34;basic-parsing-with-parse_datetime-parse_date-and-parse_time&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Basic parsing with &lt;code&gt;parse_datetime&lt;/code&gt;, &lt;code&gt;parse_date&lt;/code&gt; and &lt;code&gt;parse_time&lt;/code&gt;,&lt;/h3&gt;
&lt;p&gt;When called without any additional arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parse_datetime()&lt;/code&gt; expects an ISO8601 date-time. ISO8601 is an international standard in which the components of a date are organized from biggest to smallest: year, month, day, hour, minute, second. This is the most important date/time standard:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_datetime(&amp;quot;2010-10-01T201059&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2010-10-01 20:10:59 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# The T in the following code means time
parse_datetime(&amp;quot;20101010T201059&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2010-10-10 20:10:59 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# If time is omitted, it will be set to midnight
parse_datetime(&amp;quot;20101010&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2010-10-10 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parse_date()&lt;/code&gt; expects a four-digit year, a - or /, the month, a - or /, then the day:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_date(&amp;quot;2010-10-01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2010-10-01&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_date(&amp;quot;2010/10/01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2010-10-01&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;It is said in the vignette that the &lt;code&gt;date_format&lt;/code&gt; from &lt;code&gt;locale()&lt;/code&gt; is used for guessing column types. The default date format is &lt;code&gt;%Y-%m-%d&lt;/code&gt; because that’s unambiguous:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_date(&amp;quot;2010-10-10&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2010-10-10&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;If you want to read 10/10/2010 (i.e., the American style) instead, you can specify the date format in the &lt;code&gt;parse_date&lt;/code&gt; or in the &lt;code&gt;locale&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_date(&amp;quot;10/10/2010&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: 1 parsing failure.
## row # A tibble: 1 x 4 col     row   col expected     actual     expected   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;      actual 1     1    NA &amp;quot;date like &amp;quot; 10/10/2010&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_date(&amp;quot;10/10/2010&amp;quot;, locale = locale(date_format = &amp;quot;%d/%m/%Y&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2010-10-10&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parse_time()&lt;/code&gt; from &lt;strong&gt;hms&lt;/strong&gt; package expects the hour, :, minutes, optionally : and seconds, and an optional a.m./p.m. specifier:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(hms)
parse_time(&amp;quot;01:10 am&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 01:10:00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_time(&amp;quot;20:10:01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 20:10:01&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;own-date-time-format&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Own date-time format&lt;/h3&gt;
&lt;p&gt;You can do it in the following way or using &lt;code&gt;locale&lt;/code&gt;, as mentioned above:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_date(&amp;quot;01/02/15&amp;quot;, &amp;quot;%m/%d/%y&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2015-01-02&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# or parse_date(&amp;quot;01/02/15&amp;quot;, locale = locale(&amp;quot;%m/%d/%y&amp;quot;))

parse_date(&amp;quot;01/02/15&amp;quot;, &amp;quot;%d/%m/%y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2015-02-01&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_date(&amp;quot;01/02/15&amp;quot;, &amp;quot;%y/%m/%d&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2001-02-15&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following are the pieces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Year&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;%Y (4 digits).&lt;/li&gt;
&lt;li&gt;%y (2 digits; 00-69 –&amp;gt; 2000-2069, 70-99 –&amp;gt; 1970-1999).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Month&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;%m (2 digits).&lt;/li&gt;
&lt;li&gt;%b (abbreviated name, like “Jan”).&lt;/li&gt;
&lt;li&gt;%B (full name, “January”).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Day&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;%d (2 digits).&lt;/li&gt;
&lt;li&gt;%e (optional leading space).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Time&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;%H (0-23 hour format).&lt;/li&gt;
&lt;li&gt;%I (0-12, must be used with %p).&lt;/li&gt;
&lt;li&gt;%p (a.m./p.m. indicator).&lt;/li&gt;
&lt;li&gt;%M (minutes).&lt;/li&gt;
&lt;li&gt;%S (integer seconds).&lt;/li&gt;
&lt;li&gt;%OS (real seconds).&lt;/li&gt;
&lt;li&gt;%Z (time zone [a name, e.g., America/Chicago]). Note: beware of abbreviations. If you’re American, note that “EST” is a Canadian time zone that does not have daylight saving time. It is Eastern Standard Time!&lt;/li&gt;
&lt;li&gt;%z (as offset from UTC, e.g., +0800).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Nondigits&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;%. (skips one nondigit character).&lt;/li&gt;
&lt;li&gt;%* (skips any number of nondigits).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;built-in-non-english-month-names-with-localedate_names&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Built-in Non-English month names with &lt;code&gt;locale(date_names =  )&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If you’re using &lt;code&gt;%b&lt;/code&gt; or &lt;code&gt;%B&lt;/code&gt; with non-English month names, you’ll need to set the lang argument to &lt;code&gt;locale()&lt;/code&gt;. See the list of built-in languages in &lt;code&gt;date_names_langs()&lt;/code&gt;, or if your language is not already included, create your own with &lt;code&gt;date_names()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_date(&amp;quot;1 janvier 2015&amp;quot;, &amp;quot;%d %B %Y&amp;quot;, locale = locale(&amp;quot;fr&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2015-01-01&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;customize-date-and-month-names-using-date_names&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Customize date and month names using &lt;code&gt;date_names&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The following example creates a locale with Maori date names:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;maori &amp;lt;- locale(date_names(
  day = c(&amp;quot;Ratapu&amp;quot;, &amp;quot;Rahina&amp;quot;, &amp;quot;Ratu&amp;quot;, &amp;quot;Raapa&amp;quot;, &amp;quot;Rapare&amp;quot;, &amp;quot;Ramere&amp;quot;, &amp;quot;Rahoroi&amp;quot;),
  mon = c(&amp;quot;Kohi-tatea&amp;quot;, &amp;quot;Hui-tanguru&amp;quot;, &amp;quot;Poutu-te-rangi&amp;quot;, &amp;quot;Paenga-whawha&amp;quot;,
    &amp;quot;Haratua&amp;quot;, &amp;quot;Pipiri&amp;quot;, &amp;quot;Hongongoi&amp;quot;, &amp;quot;Here-turi-koka&amp;quot;, &amp;quot;Mahuru&amp;quot;,
    &amp;quot;Whiringa-a-nuku&amp;quot;, &amp;quot;Whiringa-a-rangi&amp;quot;, &amp;quot;Hakihea&amp;quot;)
))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following example creates a locale with Malaysia date names:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;malaysia &amp;lt;- locale(date_names(
  day = c(&amp;quot;Isnin&amp;quot;, &amp;quot;Selasa&amp;quot;, &amp;quot;Rabu&amp;quot;, &amp;quot;Khamis&amp;quot;, &amp;quot;Jumaat&amp;quot;, &amp;quot;Sabtu&amp;quot;, &amp;quot;Ahad&amp;quot;),
  mon = c(&amp;quot;Januari&amp;quot;, &amp;quot;Februari&amp;quot;, &amp;quot;Mac&amp;quot;, &amp;quot;April&amp;quot;,&amp;quot;Mei&amp;quot;,
    &amp;quot;Jun&amp;quot;, &amp;quot;Julai&amp;quot;, &amp;quot;Ogos&amp;quot;, &amp;quot;September&amp;quot;, &amp;quot;Oktober&amp;quot;,
    &amp;quot;November&amp;quot;, &amp;quot;Disember&amp;quot;)
))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;parsing-a-file&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Parsing a File&lt;/h1&gt;
&lt;div id=&#34;strategy-used-by-readr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Strategy used by &lt;strong&gt;readr&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;readr&lt;/strong&gt; uses a heuristic to figure out the type of each column: it reads the first 1000 rows and uses some (moderately conservative) heuristics to figure out the type of each column. You can emulate this process with a character vector using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;guess_parser()&lt;/code&gt;, which returns &lt;strong&gt;readr&lt;/strong&gt;’s best guess&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_guess()&lt;/code&gt;, which uses that guess to parse the column&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;guess_parser(&amp;quot;2010-10-01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;date&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;guess_parser(&amp;quot;15:01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;time&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;guess_parser(c(&amp;quot;TRUE&amp;quot;, &amp;quot;FALSE&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;logical&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;guess_parser(c(&amp;quot;1&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;9&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;guess_parser(c(&amp;quot;12,352,561&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;number&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(parse_guess(&amp;quot;2010-10-10&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Date[1:1], format: &amp;quot;2010-10-10&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The heuristic tries each of the following types, stopping when it finds a match:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;logical&lt;/em&gt; Contains only “F”, “T”, “FALSE”, or “TRUE”.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;integer&lt;/em&gt; Contains only numeric characters (and -).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;double&lt;/em&gt; Contains only valid doubles (including numbers like 4.5e-5).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;number&lt;/em&gt; Contains valid doubles with the &lt;code&gt;grouping mark&lt;/code&gt; inside.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;time&lt;/em&gt; Matches the default &lt;code&gt;time_format&lt;/code&gt;(&lt;code&gt;%Y-%m-%d&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;date&lt;/em&gt; Matches the default &lt;code&gt;date_format&lt;/code&gt; (separate with :).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;date-time&lt;/em&gt; Any ISO8601 date.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If none of these rules apply, then the column will stay as a vector of strings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;problems-of-default-file-parsing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Problems of default file parsing&lt;/h2&gt;
&lt;p&gt;There are two basic problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first thousand rows might be a special case, and &lt;strong&gt;readr&lt;/strong&gt; guesses a type that is not sufficiently general. For example, you might have a column of doubles that only contains integers in the first 1000 rows.&lt;/li&gt;
&lt;li&gt;The column might contain a lot of missing values. If the first 1000 rows contain only NAs, readr will guess that it’s a character vector.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;readr&lt;/strong&gt; contains a challenging CSV that illustrates both of these problems. Note the use of &lt;code&gt;readr_example()&lt;/code&gt;, which finds the path to one of the files included with the package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;challenge &amp;lt;- read_csv(readr_example(&amp;quot;challenge.csv&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in rbind(names(probs), probs_f): number of columns of result is not
## a multiple of vector length (arg 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: 1000 parsing failures.
## row # A tibble: 5 x 5 col     row col   expected               actual             file               expected   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;              actual 1  1001 x     no trailing characters .23837975086644292 &amp;#39;C:/Users/mirac/O~ file 2  1002 x     no trailing characters .41167997173033655 &amp;#39;C:/Users/mirac/O~ row 3  1003 x     no trailing characters .7460716762579978  &amp;#39;C:/Users/mirac/O~ col 4  1004 x     no trailing characters .723450553836301   &amp;#39;C:/Users/mirac/O~ expected 5  1005 x     no trailing characters .614524137461558   &amp;#39;C:/Users/mirac/O~

## See problems(...) for more details.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use &lt;code&gt;problems()&lt;/code&gt; to explore in depth:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;problems(challenge)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 5
##      row col   expected               actual             file             
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;            
##  1  1001 x     no trailing characters .23837975086644292 &amp;#39;C:/Users/mirac/~
##  2  1002 x     no trailing characters .41167997173033655 &amp;#39;C:/Users/mirac/~
##  3  1003 x     no trailing characters .7460716762579978  &amp;#39;C:/Users/mirac/~
##  4  1004 x     no trailing characters .723450553836301   &amp;#39;C:/Users/mirac/~
##  5  1005 x     no trailing characters .614524137461558   &amp;#39;C:/Users/mirac/~
##  6  1006 x     no trailing characters .473980569280684   &amp;#39;C:/Users/mirac/~
##  7  1007 x     no trailing characters .5784610391128808  &amp;#39;C:/Users/mirac/~
##  8  1008 x     no trailing characters .2415937229525298  &amp;#39;C:/Users/mirac/~
##  9  1009 x     no trailing characters .11437866208143532 &amp;#39;C:/Users/mirac/~
## 10  1010 x     no trailing characters .2983446326106787  &amp;#39;C:/Users/mirac/~
## # ... with 990 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check out the last few rows and you’ll see that they’re dates stored in a character vector in column &lt;code&gt;y&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(challenge)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##       x y         
##   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     
## 1    NA 2019-11-21
## 2    NA 2018-03-29
## 3    NA 2014-08-04
## 4    NA 2015-08-16
## 5    NA 2020-02-04
## 6    NA 2019-01-06&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A good strategy is to work column by column until there are no problems remaining. Here we can see that there are a lot of parsing problems with the x column-there are trailing characters after the integer value. That suggests we need to use a double parser instead.&lt;/p&gt;
&lt;div id=&#34;overwrite-the-default-file-parsing-specification&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overwrite the default file parsing specification&lt;/h3&gt;
&lt;p&gt;Start with copying the column specification. Remember to add in &lt;code&gt;col_types =&lt;/code&gt; Then, tweak the type of the desired column, x:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;challenge &amp;lt;- read_csv(
  readr_example(&amp;quot;challenge.csv&amp;quot;),
  col_types = cols(
  x = col_double(),
  y = col_date()
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Every &lt;code&gt;parse_xyz()&lt;/code&gt; function has a corresponding &lt;code&gt;col_xyz()&lt;/code&gt; function. You use &lt;code&gt;parse_xyz()&lt;/code&gt; when the data is in a character vector in R already; you use &lt;code&gt;col_xyz()&lt;/code&gt; when you want to tell readr how to load the data.&lt;/p&gt;
&lt;p&gt;It’s recommended to always supply &lt;code&gt;col_types&lt;/code&gt; instead of relying on the default. If you want to be really strict, use &lt;code&gt;stop_for_problems()&lt;/code&gt;: that will throw an error and stop your script if there are any parsing problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-strategies-to-parse-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other Strategies to parse files&lt;/h2&gt;
&lt;p&gt;There are a few other general strategies to help you parse files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increase the number of &lt;code&gt;guess_max&lt;/code&gt;. In the previous example, if we look at just one more row than the default, we can correctly parse in one shot&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;challenge2 &amp;lt;- read_csv(
                readr_example(&amp;quot;challenge.csv&amp;quot;),
                guess_max = 1001
              )&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Read in all the columns as character vectors in conjunction with &lt;code&gt;type_convert()&lt;/code&gt;, which applies the parsing heuristics to the character columns in a data frame. This makes problem diagnosis easier:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;challenge2 &amp;lt;- read_csv(readr_example(&amp;quot;challenge.csv&amp;quot;),
                col_types = cols(.default = col_character())
              )

challenge3 &amp;lt;- type_convert(challenge2)
tail(challenge3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##       x y         
##   &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;    
## 1 0.805 2019-11-21
## 2 0.164 2018-03-29
## 3 0.472 2014-08-04
## 4 0.718 2015-08-16
## 5 0.270 2020-02-04
## 6 0.608 2019-01-06&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;If you’re reading a very large file, you might want to set &lt;code&gt;n_max&lt;/code&gt;, maximum number of records to read, to a smallish number like 10,000 or 100,000. That will accelerate your iterations when you eliminate common problems.&lt;/li&gt;
&lt;li&gt;If you’re having major parsing problems, sometimes it’s easier to just read into a character vector of lines with &lt;code&gt;read_lines()&lt;/code&gt;, or even a character vector of length 1 with &lt;code&gt;read_file()&lt;/code&gt;. Then you can use the string parsing skills you’ll learn later to parse more exotic formats.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-to-a-file&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Writing to a File&lt;/h1&gt;
&lt;p&gt;The two main functions are: &lt;code&gt;write_csv()&lt;/code&gt; and &lt;code&gt;write_tsv()&lt;/code&gt;. If you want to export a CSV file to Excel, use &lt;code&gt;write_excel_csv()&lt;/code&gt;. Both functions increase the chances of the output file being read back in correctly by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always encoding strings in UTF-8.&lt;/li&gt;
&lt;li&gt;Saving dates and date-times in ISO8601 format so they are easily parsed elsewhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;write-to-csv-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Write to csv file&lt;/h2&gt;
&lt;p&gt;The arguments for the functions are:&lt;br /&gt;
&lt;code&gt;write_csv(data_frame_to_save, path, na = &amp;quot;NA&amp;quot;, append = FALSE, col_names = !append)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;write_csv(challenge, &amp;quot;challenge.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the &lt;strong&gt;type&lt;/strong&gt; information is lost when you save to CSV - you need to re-create the column specification every time you load in.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;alternative-file-writing-methods-that-preserve-data-type&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Alternative file writing methods that preserve data type&lt;/h2&gt;
&lt;p&gt;There are two alternatives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;write_rds(&lt;/code&gt;) and &lt;code&gt;read_rds()&lt;/code&gt; are uniform wrappers around the base functions &lt;code&gt;readRDS()&lt;/code&gt; and &lt;code&gt;saveRDS()&lt;/code&gt;. These store data in R’s custom binary format called RDS:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;write_rds(challenge, &amp;quot;challenge.rds&amp;quot;)
read_rds(&amp;quot;challenge.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;feather&lt;/strong&gt; package implements a fast binary file format that can be shared across programming languages:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;library(feather)
write_feather(challenge, &amp;quot;challenge.feather&amp;quot;)
read_feather(&amp;quot;challenge.feather&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;feather&lt;/strong&gt; tends to be faster than RDS and is usable outside of R. RDS supports list-columns (which you’ll learn about in Chapter 20); &lt;strong&gt;feather&lt;/strong&gt; currently does not.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-types-of-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other Types of Data&lt;/h1&gt;
&lt;div id=&#34;rectangular-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rectangular data&lt;/h2&gt;
&lt;p&gt;For rectangular data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;haven&lt;/strong&gt; reads SPSS, Stata, and SAS files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;readxl&lt;/strong&gt; reads Excel files (both &lt;em&gt;.xls&lt;/em&gt; and &lt;em&gt;.xlsx&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DBI&lt;/strong&gt;, along with a database-specific backend (e.g., &lt;strong&gt;RMySQL&lt;/strong&gt;, &lt;strong&gt;RSQLite&lt;/strong&gt;, &lt;strong&gt;RPostgreSQL&lt;/strong&gt;, etc.) allows you to run SQL queries against a database and return a data frame.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;hierarchical-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Hierarchical Data&lt;/h2&gt;
&lt;p&gt;For hierarchical data: use &lt;strong&gt;jsonlite&lt;/strong&gt; (by Jeroen Ooms) for JSON, and &lt;strong&gt;xml2&lt;/strong&gt; for XML. Jenny Bryan has some excellent worked examples at &lt;a href=&#34;https://jennybc.github.io/purrr-tutorial/&#34; class=&#34;uri&#34;&gt;https://jennybc.github.io/purrr-tutorial/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;For other file types, try the &lt;strong&gt;R data import/export manual&lt;/strong&gt; and the &lt;strong&gt;rio&lt;/strong&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tibbles</title>
      <link>/readings/tibbles/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/readings/tibbles/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#creating-tibbles&#34;&gt;Creating Tibbles&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#coerce-into-tibble-using-as.tibble&#34;&gt;Coerce into tibble using &lt;code&gt;as.tibble&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#new-tibble-from-individual-vectors-using-tibble&#34;&gt;New tibble from individual vectors using &lt;code&gt;tibble()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nonsyntactic-column-names-in-tibble&#34;&gt;Nonsyntactic column names in tibble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rename-column-names-using-rename&#34;&gt;Rename column names using &lt;code&gt;rename()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-entry-with-transposed-tibble-tribble&#34;&gt;Data Entry with transposed tibble: &lt;code&gt;tribble()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#convert-vectors-or-lists-to-two-column-data-frames-using-enframe&#34;&gt;Convert vectors or lists to two-column data frames using &lt;code&gt;enframe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tibbles-versus-data.frame&#34;&gt;Tibbles Versus data.frame&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#printing&#34;&gt;Printing&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#display-n-rows-and-all-columns-using-print&#34;&gt;Display &lt;strong&gt;n&lt;/strong&gt; rows and all columns using &lt;code&gt;print()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#control-default-printing-behaviours-by-setting-options&#34;&gt;Control default printing behaviours by setting &lt;code&gt;options()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#use-rstudios-viewer&#34;&gt;Use RStudios Viewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#control-number-of-column-names-printed-at-the-footer-of-a-tibble-using-print&#34;&gt;Control number of column names printed at the footer of a tibble using &lt;code&gt;print&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsetting-tibble-using-and-.&#34;&gt;Subsetting tibble using $ and [[.]]&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#extract-reference-variables-for-subsetting-tibbles&#34;&gt;Extract reference variables for subsetting tibbles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsetting-in-a-pipe-using-.&#34;&gt;Subsetting in a pipe using &lt;strong&gt;.&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subset-tibbles-with-nonsyntactic-column-names&#34;&gt;Subset tibbles with nonsyntactic column names&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#check-if-an-object-is-a-tibble-using-class&#34;&gt;Check if an object is a tibble using &lt;code&gt;class()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#interacting-with-older-code&#34;&gt;Interacting with Older Code&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#turn-a-tibble-into-dataframe-using-as.data.frame&#34;&gt;Turn a tibble into dataframe using &lt;code&gt;as.data.frame()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#frustrations-caused-by-subsetting-default-data.frame&#34;&gt;Frustrations caused by subsetting default &lt;code&gt;data.frame&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;** This post is heavily based on &lt;a href=&#34;http://r4ds.had.co.nz/&#34;&gt;R for Data Science&lt;/a&gt;. Please consider to buy that book if you find this post useful.**&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;tibble&lt;/strong&gt; package is part of the &lt;strong&gt;tidyverse&lt;/strong&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library (tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;creating-tibbles&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Creating Tibbles&lt;/h1&gt;
&lt;div id=&#34;coerce-into-tibble-using-as.tibble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Coerce into tibble using &lt;code&gt;as.tibble&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Most other R packages use regular data frames, so you might want to coerce a data frame to a tibble. You can do that with &lt;code&gt;as.tibble()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.tibble(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 150 x 5
##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
##           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  
##  1         5.10        3.50         1.40       0.200 setosa 
##  2         4.90        3.00         1.40       0.200 setosa 
##  3         4.70        3.20         1.30       0.200 setosa 
##  4         4.60        3.10         1.50       0.200 setosa 
##  5         5.00        3.60         1.40       0.200 setosa 
##  6         5.40        3.90         1.70       0.400 setosa 
##  7         4.60        3.40         1.40       0.300 setosa 
##  8         5.00        3.40         1.50       0.200 setosa 
##  9         4.40        2.90         1.40       0.200 setosa 
## 10         4.90        3.10         1.50       0.100 setosa 
## # ... with 140 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;new-tibble-from-individual-vectors-using-tibble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;New tibble from individual vectors using &lt;code&gt;tibble()&lt;/code&gt;&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(
  x = 1:5,
  y = 1,
  z = x ^ 2 + y
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
##       x     y     z
##   &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1    1.    2.
## 2     2    1.    5.
## 3     3    1.   10.
## 4     4    1.   17.
## 5     5    1.   26.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe that the input 1 in column &lt;code&gt;y&lt;/code&gt; is repeated.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tibble()&lt;/code&gt; never changes the type of inputs (i.e, changes strings into factors), never changes the names of the variables, and never create row names, as compared to &lt;code&gt;data.frame&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;nonsyntactic-column-names-in-tibble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Nonsyntactic column names in tibble&lt;/h2&gt;
&lt;p&gt;It’s possible for a tibble to have column names that are not valid R variable names, aka nonsyntactic names. To refer to these variables, you need to surround them with backticks, `:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tb &amp;lt;- tibble(
  `:)` = &amp;quot;smile&amp;quot;,
  ` ` = &amp;quot;space&amp;quot;,
  `2000` = &amp;quot;number&amp;quot;
)
tb&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##   `:)`  ` `   `2000`
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; 
## 1 smile space number&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll also need the backticks when working with these variables in other packages, like &lt;strong&gt;ggplot2&lt;/strong&gt;,&lt;strong&gt;dplyr&lt;/strong&gt;, and &lt;strong&gt;tidyr&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rename-column-names-using-rename&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rename column names using &lt;code&gt;rename()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;new_tb = rename(tibble, new_col_name = old_col_name, ...)&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tb_new &amp;lt;- rename(tb, smile = `:)`, space = ` `)
tb_new&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##   smile space `2000`
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; 
## 1 smile space number&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-entry-with-transposed-tibble-tribble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Entry with transposed tibble: &lt;code&gt;tribble()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;tribble()` is customized for data entry in code: column headings are defined by formulas (i.e., they start with ~), and entries are separated by commas. This makes it possible to lay out small amounts of data in easy-to-read form:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tribble(
  ~x, ~y, ~z,
  #--|--|----
  &amp;quot;a&amp;quot;, 2, 3.6,
  &amp;quot;b&amp;quot;, 1, 8.5
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   x         y     z
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 a        2.  3.60
## 2 b        1.  8.50&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A comment is added to make it clear where the column header is.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;convert-vectors-or-lists-to-two-column-data-frames-using-enframe&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Convert vectors or lists to two-column data frames using &lt;code&gt;enframe&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;enframe(x, name = &amp;quot;name&amp;quot;, value = &amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# natural sequence, unnamed vectors
enframe(1:3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##    name value
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     1
## 2     2     2
## 3     3     3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## named sequence
enframe(c(a = 5, b = 7))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 2
##   name  value
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1 a        5.
## 2 b        7.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;enframe(c(a = 1, b = 2, c = 3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   name  value
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1 a        1.
## 2 b        2.
## 3 c        3.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tibbles-versus-data.frame&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tibbles Versus data.frame&lt;/h1&gt;
&lt;p&gt;There are two main differences in the usage of a &lt;code&gt;tibble&lt;/code&gt; versus a classic &lt;code&gt;data.frame&lt;/code&gt;: printing and subsetting.&lt;/p&gt;
&lt;div id=&#34;printing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Printing&lt;/h2&gt;
&lt;p&gt;Tibbles are designed so that you don’t accidentally overwhelm your console when you print large data frames. It only shows the first 10 rows, and all the columns that fit on screen. In addition to its name, each column reports its &lt;strong&gt;type&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(
  a = lubridate::now() + runif(1e3) * 86400,
  b = lubridate::today() + runif(1e3) * 30,
  c = 1:1e3,
  d = runif(1e3),
  e = sample(letters, 1e3, replace = TRUE)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 5
##    a                   b              c     d e    
##    &amp;lt;dttm&amp;gt;              &amp;lt;date&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;
##  1 2018-07-10 01:58:26 2018-08-07     1 0.751 m    
##  2 2018-07-09 14:09:06 2018-07-17     2 0.503 c    
##  3 2018-07-10 05:34:49 2018-07-27     3 0.388 z    
##  4 2018-07-09 20:07:05 2018-08-01     4 0.520 n    
##  5 2018-07-10 04:54:28 2018-07-24     5 0.351 g    
##  6 2018-07-09 21:16:36 2018-08-04     6 0.504 r    
##  7 2018-07-09 10:23:43 2018-07-13     7 0.419 i    
##  8 2018-07-09 10:19:01 2018-07-23     8 0.260 c    
##  9 2018-07-09 19:16:31 2018-08-02     9 0.216 v    
## 10 2018-07-10 07:01:25 2018-07-19    10 0.341 e    
## # ... with 990 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;display-n-rows-and-all-columns-using-print&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Display &lt;strong&gt;n&lt;/strong&gt; rows and all columns using &lt;code&gt;print()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;print(n = , width = Inf)&lt;/code&gt; to display &lt;code&gt;n&lt;/code&gt; rows and display all columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nycflights13::flights %&amp;gt;%
  print(n = 10, width = Inf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515        2.      830
##  2  2013     1     1      533            529        4.      850
##  3  2013     1     1      542            540        2.      923
##  4  2013     1     1      544            545       -1.     1004
##  5  2013     1     1      554            600       -6.      812
##  6  2013     1     1      554            558       -4.      740
##  7  2013     1     1      555            600       -5.      913
##  8  2013     1     1      557            600       -3.      709
##  9  2013     1     1      557            600       -3.      838
## 10  2013     1     1      558            600       -2.      753
##    sched_arr_time arr_delay carrier flight tailnum origin dest  air_time
##             &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
##  1            819       11. UA        1545 N14228  EWR    IAH       227.
##  2            830       20. UA        1714 N24211  LGA    IAH       227.
##  3            850       33. AA        1141 N619AA  JFK    MIA       160.
##  4           1022      -18. B6         725 N804JB  JFK    BQN       183.
##  5            837      -25. DL         461 N668DN  LGA    ATL       116.
##  6            728       12. UA        1696 N39463  EWR    ORD       150.
##  7            854       19. B6         507 N516JB  EWR    FLL       158.
##  8            723      -14. EV        5708 N829AS  LGA    IAD        53.
##  9            846       -8. B6          79 N593JB  JFK    MCO       140.
## 10            745        8. AA         301 N3ALAA  LGA    ORD       138.
##    distance  hour minute time_hour          
##       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dttm&amp;gt;             
##  1    1400.    5.    15. 2013-01-01 05:00:00
##  2    1416.    5.    29. 2013-01-01 05:00:00
##  3    1089.    5.    40. 2013-01-01 05:00:00
##  4    1576.    5.    45. 2013-01-01 05:00:00
##  5     762.    6.     0. 2013-01-01 06:00:00
##  6     719.    5.    58. 2013-01-01 05:00:00
##  7    1065.    6.     0. 2013-01-01 06:00:00
##  8     229.    6.     0. 2013-01-01 06:00:00
##  9     944.    6.     0. 2013-01-01 06:00:00
## 10     733.    6.     0. 2013-01-01 06:00:00
## # ... with 3.368e+05 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;control-default-printing-behaviours-by-setting-options&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Control default printing behaviours by setting &lt;code&gt;options()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;You can also control the default print behavior by setting options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;options&lt;code&gt;(tibble.print_max = n, tibble.print_min = m)&lt;/code&gt;: print a maximun of &lt;code&gt;m&lt;/code&gt; rows, and a mininum of &lt;code&gt;n&lt;/code&gt; rows. Use &lt;code&gt;options(dplyr.print_min = Inf)&lt;/code&gt; to always show all rows.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;options(tibble.width = Inf)&lt;/code&gt; to always print all columns, regardless of the width of the screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;use-rstudios-viewer&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Use RStudios Viewer&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;nycflights13::flights %&amp;gt;%
  View()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;control-number-of-column-names-printed-at-the-footer-of-a-tibble-using-print&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Control number of column names printed at the footer of a tibble using &lt;code&gt;print&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Looking up &lt;code&gt;?print&lt;/code&gt; tells that &lt;code&gt;n_extra&lt;/code&gt; argument tells the number of extra columns to print abbreviated information for, if the width is too small for the entire tibble.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(as_tibble(mtcars), n_extra = 5, width = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 11
##      mpg   cyl
##  * &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21.0    6.
##  2  21.0    6.
##  3  22.8    4.
##  4  21.4    6.
##  5  18.7    8.
##  6  18.1    6.
##  7  14.3    8.
##  8  24.4    4.
##  9  22.8    4.
## 10  19.2    6.
## # ... with 22 more
## #   rows, and 9
## #   more variables:
## #   disp &amp;lt;dbl&amp;gt;,
## #   hp &amp;lt;dbl&amp;gt;,
## #   drat &amp;lt;dbl&amp;gt;,
## #   wt &amp;lt;dbl&amp;gt;,
## #   qsec &amp;lt;dbl&amp;gt;, ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;width&lt;/code&gt; is set so that it limits the number of columns displayed (so that we can see the footer with column names).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting-tibble-using-and-.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Subsetting tibble using $ and [[.]]&lt;/h2&gt;
&lt;p&gt;Use $ and [[.]] to pull out a single variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- tibble(
  x = runif(5),
  y = rnorm(5)
)
# Extract by name
df$x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.51711995 0.05153991 0.63379396 0.58501986 0.65745106&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df[[&amp;quot;x&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.51711995 0.05153991 0.63379396 0.58501986 0.65745106&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Extract by position
df[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.51711995 0.05153991 0.63379396 0.58501986 0.65745106&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;extract-reference-variables-for-subsetting-tibbles&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extract reference variables for subsetting tibbles&lt;/h3&gt;
&lt;p&gt;If you have the name of a variable stored in an object, e.g. &lt;code&gt;var &amp;lt;- &amp;quot;mpg&amp;quot;&lt;/code&gt;, you can extract the reference variable from a tibble by using the double bracket, like &lt;code&gt;df[[var]]&lt;/code&gt; (instead of df[[“var”]]). You cannot use the dollar sign, because &lt;code&gt;df$var&lt;/code&gt; would look for a column named &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting-in-a-pipe-using-.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Subsetting in a pipe using &lt;strong&gt;.&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To use these in a pipe, you’ll need to use the special placeholder &lt;strong&gt;.&lt;/strong&gt; :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% .$x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.51711995 0.05153991 0.63379396 0.58501986 0.65745106&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% .[[&amp;quot;x&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.51711995 0.05153991 0.63379396 0.58501986 0.65745106&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;subset-tibbles-with-nonsyntactic-column-names&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Subset tibbles with nonsyntactic column names&lt;/h3&gt;
&lt;p&gt;An &lt;strong&gt;annoying&lt;/strong&gt; tibble is defined below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;annoying &amp;lt;- tibble(
  `1` = 1:10,
  `2` = `1` * 2 + rnorm(length(`1`))
)&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Extracting the variable called 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;annoying$`1` # or&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;annoying[[&amp;quot;1&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the backtick is not used in the tb [[.]].&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Plotting a scatterplot of 1 vs 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = annoying) +
  geom_point(mapping = aes(x = `1`, y = `2`))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-07-02-tibbles_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;A new column 3 which is 2 divided by 1:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;annoying3 = annoying %&amp;gt;%
  mutate(`3` = .[[&amp;quot;2&amp;quot;]]/.[[&amp;quot;1&amp;quot;]])

## or an easier way: insert straight away

annoying4 = annoying
annoying4[[&amp;quot;3&amp;quot;]] = annoying4[[&amp;quot;2&amp;quot;]]/ annoying4[[&amp;quot;1&amp;quot;]]
annoying4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
##      `1`   `2`   `3`
##    &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1     1  3.97  3.97
##  2     2  5.72  2.86
##  3     3  8.75  2.92
##  4     4 10.5   2.63
##  5     5  9.77  1.95
##  6     6 11.6   1.93
##  7     7 15.1   2.16
##  8     8 15.0   1.88
##  9     9 17.3   1.92
## 10    10 19.7   1.97&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## or

annoying5 = annoying
annoying5$`3`= annoying4[[&amp;quot;2&amp;quot;]]/ annoying4[[&amp;quot;1&amp;quot;]]
annoying5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
##      `1`   `2`   `3`
##    &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1     1  3.97  3.97
##  2     2  5.72  2.86
##  3     3  8.75  2.92
##  4     4 10.5   2.63
##  5     5  9.77  1.95
##  6     6 11.6   1.93
##  7     7 15.1   2.16
##  8     8 15.0   1.88
##  9     9 17.3   1.92
## 10    10 19.7   1.97&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;check-if-an-object-is-a-tibble-using-class&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Check if an object is a tibble using &lt;code&gt;class()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mtcars&lt;/code&gt; is a &lt;code&gt;data.frame&lt;/code&gt; object:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;code&gt;tibble&lt;/code&gt; object would only show 10 rows and show the type of data in each column. In addition, &lt;code&gt;class(mtcars)&lt;/code&gt; shows that it is a dataframe. Additionally, tibbles have class &lt;code&gt;&amp;quot;tbl_df&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;tbl&amp;quot;&lt;/code&gt; in addition to &lt;code&gt;&amp;quot;data.frame&amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(as.tibble(mtcars))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;interacting-with-older-code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Interacting with Older Code&lt;/h1&gt;
&lt;div id=&#34;turn-a-tibble-into-dataframe-using-as.data.frame&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turn a tibble into dataframe using &lt;code&gt;as.data.frame()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Some older functions don’t work with tibbles due to the [ function. [ is not used because &lt;code&gt;dplyr::filter()&lt;/code&gt; and &lt;code&gt;dplyr::select()&lt;/code&gt; allow you to solve the same problems with clearer code. If you encounter one of these functions, use &lt;code&gt;as.data.frame()&lt;/code&gt; to turn a tibble back to a data.frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(as.data.frame(tb))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;frustrations-caused-by-subsetting-default-data.frame&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Frustrations caused by subsetting default &lt;code&gt;data.frame&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Let’s define a &lt;code&gt;df&lt;/code&gt; dataframe and perform subsetting operations on it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- data.frame(abc = 1, xyz = &amp;quot;a&amp;quot;)
df$x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] a
## Levels: a&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df[, &amp;quot;xyz&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] a
## Levels: a&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df[, c(&amp;quot;abc&amp;quot;, &amp;quot;xyz&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   abc xyz
## 1   1   a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First of all, &lt;code&gt;dataframe&lt;/code&gt; partially complete a column name such that &lt;code&gt;df$x&lt;/code&gt; is the same as &lt;code&gt;df$xyz&lt;/code&gt;, posing the possible disaster of calling unintended variables.&lt;/p&gt;
&lt;p&gt;Secondly, the &lt;code&gt;[&lt;/code&gt; object returns a vector when there is one colomn but it returns a dataframe if more than one (&lt;code&gt;tibble&lt;/code&gt; always return tibbles). These is problematic if you are passing &lt;code&gt;df[, vars]&lt;/code&gt;, where the number of variables is unknown. You’d have to write codes to account those situations.&lt;/p&gt;
&lt;p&gt;Let’s compare the similar code but using a tibble instead:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tb = as.tibble(df)
tb$x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tb[, &amp;quot;xyz&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 1
##   xyz  
##   &amp;lt;fct&amp;gt;
## 1 a&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tb[, c(&amp;quot;abc&amp;quot;, &amp;quot;xyz&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##     abc xyz  
##   &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;
## 1    1. a&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Exploratory Data Analysis (EDA)</title>
      <link>/readings/exploratory-data-analysis/</link>
      <pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/readings/exploratory-data-analysis/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#variation&#34;&gt;Variation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#visualizations&#34;&gt;Visualizations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#categorical-variable-bar-chart-with-geom_bar&#34;&gt;Categorical Variable – Bar chart with &lt;code&gt;geom_bar&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#continuous-variable&#34;&gt;Continuous Variable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#typical-values&#34;&gt;Typical values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unusual-values&#34;&gt;Unusual Values&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#zoom-in-into-plot-without-resetting-xlim-and-ylim-with-coord_cartesian&#34;&gt;Zoom in into plot without resetting xlim and ylim with &lt;code&gt;coord_cartesian&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#missing-values&#34;&gt;Missing Values&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#rowwise-deletion-vs-replacing-with-nas&#34;&gt;Rowwise Deletion vs Replacing with NAs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#suppressing-ggplot2-nas-removal-warnings-with-na.rm-true&#34;&gt;Suppressing ggplot2 NAs removal warnings with &lt;code&gt;na.rm = TRUE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comparing-missing-vs-non-missing-values-by-creating-new-variable-using-is.na&#34;&gt;Comparing missing vs non-missing values by creating new variable using &lt;code&gt;is.na()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#covariation&#34;&gt;Covariation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#a-categorical-and-continuous-variable&#34;&gt;A Categorical and Continuous Variable&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#density-plot-with-geom_freqpoly&#34;&gt;Density Plot with &lt;code&gt;geom_freqpoly&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#large-dataset&#34;&gt;Large Dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#small-dataset&#34;&gt;Small Dataset&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#two-categorical-variables&#34;&gt;Two Categorical Variables&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#bubble-chart-with-geom_count&#34;&gt;Bubble Chart with &lt;code&gt;geom_count&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#heatmap-plotting-with-geom_tile&#34;&gt;Heatmap Plotting with &lt;code&gt;geom_tile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#two-continuous-variables&#34;&gt;Two Continuous Variables&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#scatterplot-using-geom_point&#34;&gt;Scatterplot using &lt;code&gt;geom_point&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#large-dataset-problems-and-solutions&#34;&gt;Large dataset problems and solutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#patterns-and-models&#34;&gt;Patterns and Models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;** This post is heavily based on &lt;a href=&#34;http://r4ds.had.co.nz/&#34;&gt;R for Data Science&lt;/a&gt;. Please consider to buy that book if you find this post useful.**&lt;/p&gt;
&lt;p&gt;We always look for variations and covariations of variables during EDA.&lt;/p&gt;
&lt;div id=&#34;variation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Variation&lt;/h1&gt;
&lt;div id=&#34;visualizations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualizations&lt;/h2&gt;
&lt;div id=&#34;categorical-variable-bar-chart-with-geom_bar&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Categorical Variable – Bar chart with &lt;code&gt;geom_bar&lt;/code&gt;&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(ggplot2)

ggplot(data = diamonds) +
  geom_bar(mapping = aes(x = cut))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;continuous-variable&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Continuous Variable&lt;/h3&gt;
&lt;div id=&#34;histogram-with-geom_histogram&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Histogram with &lt;code&gt;geom_histogram&lt;/code&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = diamonds) +
  geom_histogram(mapping = aes(x = carat), binwidth = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;overlapping-histograms-using-geom_freqpoly&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Overlapping Histograms using &lt;code&gt;geom_freqpoly&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Problem: unable to compare directly between categories since they are not having the same number of instances within a category. Add in &lt;code&gt;y = ..density..&lt;/code&gt; in the aes() to create density plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
  geom_freqpoly(binwidth = 0.1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;typical-values&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Typical values&lt;/h2&gt;
&lt;p&gt;Look for anything unexpected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which values are the most common? Why?&lt;/li&gt;
&lt;li&gt;Which values are rare? Why? Does that match your expectations?&lt;/li&gt;
&lt;li&gt;Can you see any unusual patterns? What might explain them?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In general, clusters of similar values suggest that subgroups exist in your data. To understand the subgroups, ask:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How are the observations within each cluster similar to each other?&lt;/li&gt;
&lt;li&gt;How are the observations in separate clusters different from each other?&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;How can you explain or describe the clusters?&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Why might the appearance of clusters be misleading?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;unusual-values&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Unusual Values&lt;/h2&gt;
&lt;p&gt;Outliers are observations that are unusual; data points that don’t seem to fit the pattern.&lt;/p&gt;
&lt;p&gt;Repeat your analysis with and without the outliers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If they have minimal effect on the results, and you can’t figure out why they’re there, replace them with missing values and move on.&lt;/li&gt;
&lt;li&gt;If they have a substantial effect, you shouldn’t drop them without justification. You’ll need to figure out what caused them (e.g., a data entry error) and disclose that you removed them in your write-up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;zoom-in-into-plot-without-resetting-xlim-and-ylim-with-coord_cartesian&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Zoom in into plot without resetting xlim and ylim with &lt;code&gt;coord_cartesian&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;coord_cartesian&lt;/code&gt; simply zooms in on the area specified by the limits. The calculation of the histogram is unaffected. However, the xlim and ylim functions first drop any values outside the limits, then calculates the histogram, and draws the graph with the given limits.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(diamonds) +
  geom_histogram(mapping = aes(x = y), binwidth = 0.5) + ## y is one of the vars
  coord_cartesian(ylim = c(0, 50)) ## vs ylim(c(0, 50))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;missing-values&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Missing Values&lt;/h1&gt;
&lt;p&gt;The missing values in a histogram are removed with warnings while NAs in bar chart are treated as another bar (i.e., another category). The NAs are removed prior to performing calulation (i.e., mean, sum,…). May na.rm is not TRUE, the functions return NA.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;rowwise-deletion-vs-replacing-with-nas&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rowwise Deletion vs Replacing with NAs&lt;/h2&gt;
&lt;p&gt;Two options when you encountered missing values in your data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Drop the entire row with the strange values. This is not recommended because one it is a waste to remove other variables’ measurements because of one invalid variable value. Besides, a large number of data removal will handicap your analyses when you have a low quality data.&lt;/li&gt;
&lt;li&gt;Instead, I recommend replacing the unusual values with missing values. The easiest way to do this is to use mutate() to replace the variable with a modified copy. You can use the ifelse() function to replace unusual values with NA.The arguments for &lt;code&gt;ifelse&lt;/code&gt; are &lt;code&gt;ifelse(test, value if true, value if false)&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Replace with NA
diamonds2 &amp;lt;- diamonds %&amp;gt;%
    mutate(y = ifelse(y &amp;lt; 3 | y &amp;gt; 20, NA, y))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;suppressing-ggplot2-nas-removal-warnings-with-na.rm-true&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Suppressing ggplot2 NAs removal warnings with &lt;code&gt;na.rm = TRUE&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt; always warns the NA values that it removes prior to plotting,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = diamonds2, mapping = aes(x = x, y = y)) +
  geom_point(na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;comparing-missing-vs-non-missing-values-by-creating-new-variable-using-is.na&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Comparing missing vs non-missing values by creating new variable using &lt;code&gt;is.na()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Ex: compare the scheduled departure times for cancelled and noncancelled times.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nycflights13::flights %&amp;gt;%
  mutate(
    cancelled = is.na(dep_time),
    sched_hour = sched_dep_time %/% 100,
    sched_min = sched_dep_time %% 100,
    sched_dep_time = sched_hour + sched_min / 60
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 22
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517           5.25        2.      830
##  2  2013     1     1      533           5.48        4.      850
##  3  2013     1     1      542           5.67        2.      923
##  4  2013     1     1      544           5.75       -1.     1004
##  5  2013     1     1      554           6.00       -6.      812
##  6  2013     1     1      554           5.97       -4.      740
##  7  2013     1     1      555           6.00       -5.      913
##  8  2013     1     1      557           6.00       -3.      709
##  9  2013     1     1      557           6.00       -3.      838
## 10  2013     1     1      558           6.00       -2.      753
## # ... with 336,766 more rows, and 15 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,
## #   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,
## #   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, cancelled &amp;lt;lgl&amp;gt;, sched_hour &amp;lt;dbl&amp;gt;,
## #   sched_min &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;covariation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Covariation&lt;/h1&gt;
&lt;p&gt;It is the tendency for the values of two or more variables to vary together in a related way.&lt;/p&gt;
&lt;div id=&#34;a-categorical-and-continuous-variable&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A Categorical and Continuous Variable&lt;/h2&gt;
&lt;p&gt;It is used to explore the distribution of a continuous variable broken down by a categorical variable.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;density-plot-with-geom_freqpoly&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Density Plot with &lt;code&gt;geom_freqpoly&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Problem of faceted histogram: unable to compare directly between categories since they are not having the same number of instances within a category. Density plot ensures that we are comparing categories in a same scale – density.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(
  data = diamonds,
    mapping = aes(x = price, y = ..density..)
  ) +
  geom_freqpoly(mapping = aes(color = cut), binwidth = 500)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;large-dataset&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Large Dataset&lt;/h3&gt;
&lt;div id=&#34;letter-value-plot-for-large-datasetinstead-of-boxplot-using-geom_lv&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Letter-value plot (for large dataset|instead of boxplot) using &lt;code&gt;geom_lv&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The boxes of the letter-value plot (lvplot) correspond to many more quantiles. They are useful for larger datasets because&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;larger datasets can give precise estimates of quantiles beyond the quartiles, and&lt;/li&gt;
&lt;li&gt;in expectation, larger datasets should have more outliers (in absolute numbers).&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(lvplot)
ggplot(diamonds, aes(x = cut, y = price)) +
  geom_lv()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;violin-plot-to-show-distributions-using-geom_violin&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Violin plot (to show distributions) using &lt;code&gt;geom_violin&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;A violin plot is a hybrid of a box plot and a kernel density plot, which shows peaks in the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
  geom_violin() +
  coord_flip()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;small-dataset&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Small Dataset&lt;/h3&gt;
&lt;div id=&#34;boxplot-for-small-dataset-using-geom_boxplot&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Boxplot (for small dataset) using &lt;code&gt;geom_boxplot&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Interquantile range (IQR) = 25 to 75th percentile. These are the two lines of the box in a boxplot.&lt;/li&gt;
&lt;li&gt;Median is the 50th percentile.&lt;/li&gt;
&lt;li&gt;Visual points are outliers. They fall beyond 1.5 x IQR.&lt;/li&gt;
&lt;li&gt;The whisker (or a line) is the range of the non-outliers.&lt;/li&gt;
&lt;li&gt;Problem 1: tend to display a prohibitively large number of “outlying values” and is more suitable for small dataset. Use letter-value plot for large dataset.&lt;/li&gt;
&lt;li&gt;Problem 2: Limiting for multimodal distributions (those with multiple peaks).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
  geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;reorder-the-levels-of-categorical-variables-using-reorder&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Reorder the levels of categorical variables using &lt;code&gt;reorder()&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;reorder(factor_to_be_ordered, values_that_decide_the order, FUN)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To make the trend easier to see, we can reorder class based on the median value of &lt;code&gt;hwy&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg) +
  geom_boxplot(
    mapping = aes(
      x = reorder(class, hwy, FUN = median),
      y = hwy
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;horizontal-boxplot-using-coord_flip-or-geom_boxploth&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Horizontal boxplot using &lt;code&gt;coord_flip&lt;/code&gt; or &lt;code&gt;geom_boxploth&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;The first one using &lt;code&gt;coord_flip&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg) +
  geom_boxplot(
    mapping = aes(
      x = reorder(class, hwy, FUN = median),
      y = hwy
  )
) +
  coord_flip()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The second uses &lt;code&gt;geom_boxploth&lt;/code&gt; from &lt;strong&gt;ggstance&lt;/strong&gt;. The only difference is the aesthethics of x and y: it is flipped when we use &lt;code&gt;coord_flip()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggstance)
ggplot(data = mpg) +
  geom_boxploth(
    mapping = aes(
      x = hwy,
      y = reorder(class, hwy, FUN = median)
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;jitter-points-using-geom_jitter&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Jitter points using &lt;code&gt;geom_jitter&lt;/code&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg) +
  geom_jitter(mapping = aes(x = reorder(class, hwy, FUN = median),
                              y = hwy)
                )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;jitter-violin-plot-using-geom_quasirandom&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Jitter + Violin plot using &lt;code&gt;geom_quasirandom&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;There are several methods available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;quasirandom&lt;/li&gt;
&lt;li&gt;pseudorandom&lt;/li&gt;
&lt;li&gt;tukey&lt;/li&gt;
&lt;li&gt;tukeyDense&lt;/li&gt;
&lt;li&gt;frowney&lt;/li&gt;
&lt;li&gt;smiley&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggbeeswarm)
## Quasirandom default method -- quasirandom
ggplot(data = mpg) +
  geom_quasirandom(mapping = aes(x = reorder(class, hwy, FUN = median),
                                 y = hwy))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Tukey
ggplot(data = mpg) +
  geom_quasirandom(mapping = aes(x = reorder(class, hwy, FUN = median),
                                 y = hwy),
                   method = &amp;quot;tukey&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-17-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;offsetting-sideway-the-violin-plot-using-geom_beeswarm&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Offsetting (sideway) the violin plot using &lt;code&gt;geom_beeswarm&lt;/code&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggbeeswarm)
ggplot(data = mpg) +
  geom_beeswarm(mapping = aes(x = reorder(class, hwy, FUN = median),
                              y = hwy)
                )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;two-categorical-variables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Two Categorical Variables&lt;/h2&gt;
&lt;p&gt;It’s usually better to use the categorical variable with a larger number of categories or the longer labels on the y axis. If at all possible, labels should be horizontal because that is easier to read.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;bubble-chart-with-geom_count&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Bubble Chart with &lt;code&gt;geom_count&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;To visualize the covariation between categorical variables, you’ll need to count the number of observations for each combination. One way to do that is to rely on the built-in &lt;code&gt;geom_count()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = diamonds) +
  geom_count(mapping = aes(x = cut, y = color))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;heatmap-plotting-with-geom_tile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Heatmap Plotting with &lt;code&gt;geom_tile&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Another approach is to compute the count with &lt;em&gt;dplyr&lt;/em&gt;, then visualize with &lt;code&gt;geom_tile()&lt;/code&gt; and the &lt;em&gt;fill&lt;/em&gt; aesthetic:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds %&amp;gt;%
  count(color, cut) %&amp;gt;%  ## count(tbl, vars_to_group_by)
  ggplot(mapping = aes(x = color, y = cut)) +
    geom_tile(mapping = aes(fill = n))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also use &lt;code&gt;scale_fill_viridis&lt;/code&gt; from the &lt;strong&gt;viridis&lt;/strong&gt; package to fill the color of legend:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(viridis)
diamonds %&amp;gt;%
  count(color, cut) %&amp;gt;%
  group_by(color) %&amp;gt;%
  mutate(prop = n/ sum(n))%&amp;gt;%
    ggplot(mapping = aes(x = color, y = cut)) +
      geom_tile(mapping = aes(fill = prop)) +
      scale_fill_viridis(limits = c(0,1)) +  
      # using scale_fill_continuous(limits = c(0,1)) will not change the fill color
      labs(x = &amp;quot;Diamond color&amp;quot;, fill = &amp;quot;Proportion&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If the categorical variables are unordered, you might want to use the &lt;strong&gt;seriation&lt;/strong&gt; package to simultaneously reorder the rows and columns in order to more clearly reveal interesting patterns. For larger plots, you might want to try the &lt;strong&gt;d3heatmap&lt;/strong&gt; or &lt;strong&gt;heatmaply&lt;/strong&gt; packages, which create interactive plots.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;two-continuous-variables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Two Continuous Variables&lt;/h2&gt;
&lt;div id=&#34;scatterplot-using-geom_point&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scatterplot using &lt;code&gt;geom_point&lt;/code&gt;&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = diamonds) +
  geom_point(mapping = aes(x = carat, y = price))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;large-dataset-problems-and-solutions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Large dataset problems and solutions&lt;/h3&gt;
&lt;p&gt;Scatterplots become less useful as the size of your dataset grows, because points begin to overplot, and pile up into areas of uniform black (as in the preceding scatterplot).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;using-alpha-aesthethics-in-geom_point&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Using &lt;strong&gt;alpha&lt;/strong&gt; aesthethics in &lt;code&gt;geom_point&lt;/code&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = diamonds) +
  geom_point(
    mapping = aes(x = carat, y = price),
    alpha = 1 / 100
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-bins&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Using Bins&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;geom_bin2d()&lt;/code&gt; and &lt;code&gt;geom_hex()&lt;/code&gt; divide the coordinate plane into 2D bins and then use a fill color to display how many points fall into each bin. &lt;code&gt;geom_bin2d()&lt;/code&gt; creates rectangular bins. &lt;code&gt;geom_hex()&lt;/code&gt; creates hexagonal bins.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;using-bin-with-geom_bin2d&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Using bin with &lt;code&gt;geom_bin2d()&lt;/code&gt;&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = smaller) +
  geom_bin2d(mapping = aes(x = carat, y = price))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-bin-with-geom_hex&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Using bin with &lt;code&gt;geom_hex()&lt;/code&gt;&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;hexbin&amp;quot;) # this is needed for geom_hex()
library (hexbin)
ggplot(data = smaller) +
  geom_hex(mapping = aes(x = carat, y = price))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bin-by-breaking-continuous-into-categorical-variable&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Bin by breaking continuous into categorical variable&lt;/h5&gt;
&lt;div id=&#34;using-cutwidth-to-bin&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Using &lt;code&gt;cutwidth&lt;/code&gt; to bin&lt;/h6&gt;
&lt;p&gt;Use &lt;code&gt;cutwidth(x, width)&lt;/code&gt; to break &lt;code&gt;x&lt;/code&gt; into bins of width &lt;code&gt;width&lt;/code&gt;. Then use visualization technique of a continuous and categorical variable combination.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
  geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)),varwidth = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-26-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The problem of using &lt;code&gt;cutwidth&lt;/code&gt; appears when the data is not uniformly distributed. Setting &lt;code&gt;varwidth = TRUE&lt;/code&gt; ensures that the size of boxplot reflects the amount of points in a particular bin.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-cutnumber-to-bin&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;Using &lt;code&gt;cutnumber&lt;/code&gt; to bin&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;cut_number(x, n)&lt;/code&gt; makes &lt;code&gt;n&lt;/code&gt; groups with (approximately) equal numbers of observations. This displays a same amount of points in each bin.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
  geom_boxplot(mapping = aes(group = cut_number(carat, 20)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/readings/2018-06-30-exploratory-data-analysis_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;patterns-and-models&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Patterns and Models&lt;/h1&gt;
&lt;p&gt;Patterns can reveal covariation while models are tools for extracting patterns out of data.&lt;/p&gt;
&lt;p&gt;If you spot a pattern in your data, ask yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Could this pattern be due to coincidence (i.e., random chance)?&lt;/li&gt;
&lt;li&gt;How can you describe the relationship implied by the pattern?&lt;/li&gt;
&lt;li&gt;How strong is the relationship implied by the pattern?&lt;/li&gt;
&lt;li&gt;What other variables might affect the relationship?&lt;/li&gt;
&lt;li&gt;Does the relationship change if you look at individual subgroups of the data?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to SQL: 5.Advanced Data Filtering</title>
      <link>/readings/introduction-to-sql-advanced-data-filtering/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/readings/introduction-to-sql-advanced-data-filtering/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#combining-where-clauses&#34;&gt;Combining &lt;code&gt;WHERE&lt;/code&gt; Clauses&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#using-the-and-operator&#34;&gt;Using the &lt;code&gt;AND&lt;/code&gt; Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-the-or-operator&#34;&gt;Using the &lt;code&gt;OR&lt;/code&gt; Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#understanding-order-of-evaluation&#34;&gt;Understanding Order of Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-the-in-operator&#34;&gt;Using the &lt;code&gt;IN&lt;/code&gt; Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-the-not-operator&#34;&gt;Using the NOT Operator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;This post is heavily based on &lt;a href=&#34;https://www.amazon.com/SQL-Minutes-Sams-Teach-Yourself/dp/0672336073&#34;&gt;Sams Teach Yourself SQL in 10 Minutes (Fourth Edition)&lt;/a&gt;. Please consider to buy the book if you find this post useful.&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;combining-where-clauses&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Combining &lt;code&gt;WHERE&lt;/code&gt; Clauses&lt;/h1&gt;
&lt;p&gt;We can specify multiple &lt;code&gt;WHERE&lt;/code&gt; clauses. These clauses may be used in two ways: as &lt;code&gt;AND&lt;/code&gt; clauses or as &lt;code&gt;OR&lt;/code&gt; clauses.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;using-the-and-operator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using the &lt;code&gt;AND&lt;/code&gt; Operator&lt;/h2&gt;
&lt;p&gt;This is used to filter by more than one column.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_id, prod_price, prod_name
FROM Products
WHERE vend_id = &amp;#39;DLL01&amp;#39; AND prod_price &amp;lt;= 4;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;AND&lt;/code&gt; instructs the database management system software to return only rows that meet all the conditions specified. If a product is made by vendor DLL01, but it costs more than $4, it is not retrieved. Additional filter conditions could be used as well, each separated by an &lt;code&gt;AND&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-or-operator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using the &lt;code&gt;OR&lt;/code&gt; Operator&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;OR&lt;/code&gt; operator instructs the database management system software to retrieve rows that match either condition. It is the opposite to &lt;code&gt;AND&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name, prod_price
FROM Products
WHERE vend_id = &amp;#39;DLL01&amp;#39; OR vend_id = &amp;#39;BRS01&amp;#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above SQL statement retrieves the product name and price for any products made by either of the two specified vendors.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;understanding-order-of-evaluation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Understanding Order of Evaluation&lt;/h2&gt;
&lt;p&gt;Let’s list of all products costing $10 or more made by vendors &lt;em&gt;DLL01&lt;/em&gt; and &lt;em&gt;BRS01&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name, prod_price
FROM Products
WHERE vend_id = &amp;#39;DLL01&amp;#39; OR vend_id = &amp;#39;BRS01&amp;#39;
AND prod_price &amp;gt;= 10;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output is shown below:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/tysql/05.Adv_Filter/eval_order_1.jpg&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;One can observe that four of the rows returned have prices less than $10. Why is that so?&lt;br /&gt;
This is caused by the orede of evaluation. SQL (like most languages) processes &lt;code&gt;AND&lt;/code&gt; operators before OR operators. Thus, it was read as &lt;em&gt;any products costing $10 or more made by vendor BRS01, and any products made by vendor DLL01 regardless of price.&lt;/em&gt;&lt;br /&gt;
The solution is to add in parentheses to explicitly group related operators because parentheses have a higher order of evaluation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name, prod_price
FROM Products
WHERE (vend_id = &amp;#39;DLL01&amp;#39; OR vend_id = &amp;#39;BRS01&amp;#39;)
AND prod_price &amp;gt;= 10;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/tysql/05.Adv_Filter/eval_order_2.jpg&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-in-operator&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Using the &lt;code&gt;IN&lt;/code&gt; Operator&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;IN&lt;/code&gt; is a keyword used in a &lt;code&gt;WHERE&lt;/code&gt; clause to specify a list of values to be matched using an &lt;code&gt;OR&lt;/code&gt; comparison. However, it has several advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cleaner and easier to read syntax.&lt;/li&gt;
&lt;li&gt;The order of evaluation is easier to manage when &lt;code&gt;IN&lt;/code&gt; is used in conjunction with other &lt;code&gt;AND&lt;/code&gt; and &lt;code&gt;OR&lt;/code&gt; operators.&lt;/li&gt;
&lt;li&gt;Execute faster.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;IN&lt;/code&gt; operator can contain another &lt;code&gt;SELECT&lt;/code&gt; statement (known as subqueries).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name, prod_price
FROM Products
WHERE vend_id IN (&amp;#39;DLL01&amp;#39;,&amp;#39;BRS01&amp;#39;)
ORDER BY prod_name;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-not-operator&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Using the NOT Operator&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;NOT&lt;/code&gt; is a keyword used in a &lt;code&gt;WHERE&lt;/code&gt; clause to negate a condition. It can be used before the column to filter on, not just after it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name
FROM Products
WHERE NOT vend_id = &amp;#39;DLL01&amp;#39;
ORDER BY prod_name;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same thing can be accomplished by using &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name
FROM Products
WHERE vend_id &amp;lt;&amp;gt; &amp;#39;DLL01&amp;#39;
ORDER BY prod_name;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;NOT&lt;/code&gt; is useful in more complex clauses. For example, using &lt;code&gt;NOT&lt;/code&gt; in conjunction with an &lt;code&gt;IN&lt;/code&gt; operator makes it simple to find all rows that do not match a list of criteria.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to SQL: 6.Using Wildcard Filtering</title>
      <link>/readings/introduction-to-sql-using-wildcard-filtering/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/readings/introduction-to-sql-using-wildcard-filtering/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#using-the-like-operator&#34;&gt;Using the LIKE Operator&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-percent-sign-wildcard&#34;&gt;The Percent Sign (%) Wildcard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-underscore-_-wildcard&#34;&gt;The Underscore (_) Wildcard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-brackets-wildcard&#34;&gt;The Brackets ([]) Wildcard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tips-for-using-wildcards&#34;&gt;Tips for Using Wildcards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;This post is heavily based on &lt;a href=&#34;https://www.amazon.com/SQL-Minutes-Sams-Teach-Yourself/dp/0672336073&#34;&gt;Sams Teach Yourself SQL in 10 Minutes (Fourth Edition)&lt;/a&gt;. Please consider to buy the book if you find this post useful.&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;using-the-like-operator&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Using the LIKE Operator&lt;/h1&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;the-percent-sign-wildcard&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Percent Sign (%) Wildcard&lt;/h2&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-underscore-_-wildcard&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Underscore (_) Wildcard&lt;/h2&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-brackets-wildcard&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Brackets ([]) Wildcard&lt;/h2&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tips-for-using-wildcards&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tips for Using Wildcards&lt;/h1&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to SQL: 1.Understanding SQL</title>
      <link>/readings/introduction-to-sql-understanding-sql/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/readings/introduction-to-sql-understanding-sql/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#database-basics&#34;&gt;Database Basics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#databases&#34;&gt;Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tables&#34;&gt;Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#columns-and-datatypes&#34;&gt;Columns and Datatypes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-sql&#34;&gt;What Is SQL?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;This post is heavily based on &lt;a href=&#34;https://www.amazon.com/SQL-Minutes-Sams-Teach-Yourself/dp/0672336073&#34;&gt;Sams Teach Yourself SQL in 10 Minutes (Fourth Edition)&lt;/a&gt;. Please consider to buy the book if you find this post useful.&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;database-basics&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Database Basics&lt;/h1&gt;
&lt;div id=&#34;databases&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Databases&lt;/h2&gt;
&lt;p&gt;Let’s define database as a collection of data stored in some organized fashion. You can think of it as a filing cabinet.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tables&lt;/h2&gt;
&lt;p&gt;A table is a structured list of data of a &lt;strong&gt;specific&lt;/strong&gt; type. It might contain a list of customers, a product catalog, or any other list of information. Files within the filing cabinet can be thought as tables.&lt;/p&gt;
&lt;p&gt;Each table stores &lt;strong&gt;unique&lt;/strong&gt; data type or list to ease data retrieval and access. While you cannot use the same table name twice in the same database, you definitely can reuse table names in different databases.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Schema&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Schema is information about database and table layout and properties. These include information about what data may be stored, how it is broken up, how individual pieces of information are named.&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;div id=&#34;columns-and-datatypes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Columns and Datatypes&lt;/h2&gt;
&lt;p&gt;Tables are made up of columns. A column contains a particular piece of information within a table. You can imagine tables as grids, somewhat like spreadsheets. Each column in the grid contains a particular piece of information. Each column in a database has an associated datatype.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Datatype&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A type of allowed data. Every table column has an associated datatype that restricts (or allows) specific data in that column.&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&#34;rows&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Rows&lt;/h3&gt;
&lt;p&gt;Data in a table is stored in rows; each record saved is stored in its own row. Envisioning a table as a spreadsheet style grid, the vertical columns in the grid are the table columns, and the horizontal rows are the table rows.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;primary-keys&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Primary Keys&lt;/h3&gt;
&lt;p&gt;Primary keys are a column (or set of columns) whose values uniquely identify every row in a table. These keys are the IDS for each rows. For example, it could be employees SSN Numbers. The primary key is used to refer to a specific row.&lt;/p&gt;
&lt;p&gt;The folowing rules apply to Primary Keys:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Primary key value has to ne unique.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Every row &lt;strong&gt;MUST&lt;/strong&gt; have a primary key value. No NULL values are allowed.&lt;/li&gt;
&lt;li&gt;Values in primary key columns should never be modified or updated.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Primary key values should &lt;strong&gt;NEVER&lt;/strong&gt; be reused in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-sql&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What Is SQL?&lt;/h1&gt;
&lt;p&gt;It stands for Structured Query Language and is promounces as &lt;em&gt;sequel&lt;/em&gt;. It is a language to communicate with databases. The biggest advantage of SQL is that SQL is not a proprietary language used by specific database vendors. Almost every major DBMS (Database Management Systems) supports SQL.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to SQL: 2.Retrieving Data</title>
      <link>/readings/introduction-to-sql-retrieving-data/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/readings/introduction-to-sql-retrieving-data/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-select-statement&#34;&gt;The &lt;code&gt;SELECT&lt;/code&gt; Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#retrieving-individual-columns&#34;&gt;Retrieving Individual Columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#retrieving-multiple-columns&#34;&gt;Retrieving Multiple Columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#retrieving-all-columns&#34;&gt;Retrieving All Columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#retrieving-distinct-rows&#34;&gt;Retrieving Distinct Rows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#limiting-results&#34;&gt;Limiting Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-comments&#34;&gt;Using Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;This post is heavily based on &lt;a href=&#34;https://www.amazon.com/SQL-Minutes-Sams-Teach-Yourself/dp/0672336073&#34;&gt;Sams Teach Yourself SQL in 10 Minutes (Fourth Edition)&lt;/a&gt;. Please consider to buy the book if you find this post useful.&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;the-select-statement&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The &lt;code&gt;SELECT&lt;/code&gt; Statement&lt;/h1&gt;
&lt;p&gt;Each SQL statement is made up of one or more keywords.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Keyword&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A reserved word that is part of the SQL language. Never name a table or column using a keyword.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;To use &lt;code&gt;SELECT&lt;/code&gt; to retrieve table data you must, at a minimum, specify two arguments - what you want to select, and from where you want to select it.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;retrieving-individual-columns&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Retrieving Individual Columns&lt;/h1&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;The following is using the data provided by the author of the book in the &lt;a href=&#34;http://forta.com/books/0672336073/&#34;&gt;book Webpage.&lt;/a&gt; I am keeping a copy at my github page, named as &lt;a href=&#34;https://github.com/TheanLim/acadblog2/tree/master/public/data&#34;&gt;tysql&lt;/a&gt; but I do not own it. I am also using Microsoft Access throughout. Download the data, open it with Access, and find a way to get to &lt;strong&gt;SQL View&lt;/strong&gt; before executing SQL statements. There may be some differences brought by different versions of Microsoft Access.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;You can type the following statements in the &lt;strong&gt;SQL View&lt;/strong&gt; and &lt;strong&gt;Run&lt;/strong&gt; it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name
FROM Products;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above retrieves a single column called &lt;em&gt;prod_name&lt;/em&gt; from the &lt;em&gt;Products&lt;/em&gt; table in the dataset. The following is how it appears in the Microsoft Access.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/tysql/02.Retrieving_Data/select_single_col.jpg&#34; /&gt;

&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Terminating Statements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Multiple SQL statements must be separated by semicolons (the ; character).&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;CASE&lt;/p&gt;

&lt;/div&gt;
 The SQL statements are case-insensitive, so &lt;code&gt;SELECT&lt;/code&gt; is the same as &lt;code&gt;select&lt;/code&gt;, which is the same as &lt;code&gt;Select&lt;/code&gt;. The convention is to use UPPERCASE for the KEYWORDS and lowercase for column and table names. While the SQL language is case-insensitive, the names of tables, columns, and values may not be.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;White space&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;In addition, all extra white space within a SQL statement is ignored when that statement is processed. So, the followings are the same:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name
FROM Products;  

SELECT prod_name FROM Products;  

SELECT
prod_name
FROM
Products;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;retrieving-multiple-columns&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Retrieving Multiple Columns&lt;/h1&gt;
&lt;p&gt;When selecting multiple columns be sure to specify a comma between each column name, but not after the last column name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_id, prod_name, prod_price
FROM Products;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;retrieving-all-columns&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Retrieving All Columns&lt;/h1&gt;
&lt;p&gt;Use the asterisk (*) wildcard character in lieu of actual column names to retrieve all columns.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT *
FROM Products;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Using Wildcards&lt;/strong&gt;&lt;br /&gt;
As a rule, you are better off not using the * wildcard unless you really do need every column in the table. Retrieving unnecessary columns usually slows down the performance of your retrieval.&lt;br /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;div id=&#34;retrieving-distinct-rows&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Retrieving Distinct Rows&lt;/h1&gt;
&lt;p&gt;Suppose you want the &lt;code&gt;DISTINCT&lt;/code&gt; vendor ID of all vendors with products in the &lt;strong&gt;products&lt;/strong&gt; table. Doing the following gives everey occurences of the the vendor ID.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT vend_id
FROM Products;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the &lt;code&gt;DISTINCT&lt;/code&gt; keyword instructs the database to only return distinct values. The &lt;code&gt;DISTINCT&lt;/code&gt; keyword must be placed directly in front of the column names.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT DISTINCT vend_id
FROM Products;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Can’t Be Partially &lt;code&gt;DISTINCT&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;DISTINCT&lt;/code&gt; keyword applies to all columns, not just the one it precedes. The following returns all rows retrieved because the combination of the specified columns are not distinct.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT DISTINCT vend_id, prod_price
FROM Products;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;limiting-results&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Limiting Results&lt;/h1&gt;
&lt;p&gt;To select top number of entries, use the &lt;code&gt;TOP&lt;/code&gt; keyword. The following uses the &lt;code&gt;SELECT TOP 5 statement&lt;/code&gt; to retrieve just the first five rows. Please note that this applies to Microsoft Access and Microsoft SQL Server but not to other DBMs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT TOP 5 prod_name
FROM Products;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;using-comments&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Using Comments&lt;/h1&gt;
&lt;p&gt;Commenting in not allowed in Access at this point of time. The following is applicable to other DBMs.&lt;br /&gt;
A # at the start of a line makes the entire line a comment.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# This is a comment
SELECT prod_name
FROM Products;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;/*  */&lt;/code&gt; for multi-lines comments.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* SELECT prod_name, vend_id
FROM Products; */
SELECT prod_name
FROM Products;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anything between &lt;code&gt;/* and */&lt;/code&gt; is comment text. This type of comment is often used to comment out code, as seen in this example.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to SQL: 3.Sorting Retrieved Data</title>
      <link>/readings/introduction-to-sql-sorting-retrieved-data/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/readings/introduction-to-sql-sorting-retrieved-data/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sorting-data&#34;&gt;Sorting Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sorting-by-multiple-columns&#34;&gt;Sorting by Multiple Columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sorting-by-column-position&#34;&gt;Sorting by Column Position&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#specifying-sort-direction&#34;&gt;Specifying Sort Direction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;This post is heavily based on &lt;a href=&#34;https://www.amazon.com/SQL-Minutes-Sams-Teach-Yourself/dp/0672336073&#34;&gt;Sams Teach Yourself SQL in 10 Minutes (Fourth Edition)&lt;/a&gt;. Please consider to buy the book if you find this post useful.&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;sorting-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Sorting Data&lt;/h1&gt;
&lt;p&gt;To explicitly sort data retrieved using a &lt;code&gt;SELECT&lt;/code&gt; statement, the &lt;code&gt;ORDER BY&lt;/code&gt; clause is used. &lt;code&gt;ORDER BY&lt;/code&gt; takes the name of one or more columns by which to sort the output.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;&lt;strong&gt;CLAUSE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SQL statements are made up of clauses, some required and some optional. A clause usually consists of a keyword and supplied data. An example of this is the SELECT statement’s FROM clause.&lt;/p&gt;

&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;SELECT prod_name
FROM Products
ORDER BY prod_name;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following shows before and after sorting:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/tysql/02.Retrieving_Data/select_single_col.jpg&#34; /&gt;

&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/tysql/03.Sort/single_col_sort.jpg&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;What is interesting here is that &lt;code&gt;8 inch teddy bear&lt;/code&gt; is located below the 12 and the 18 inches’.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;Position of &lt;code&gt;ORDER BY&lt;/code&gt; Clause&lt;/p&gt;
&lt;p&gt;When specifying an &lt;code&gt;ORDER BY&lt;/code&gt; clause, be sure that it is the last clause in your &lt;code&gt;SELECT&lt;/code&gt; statement. If it is not the last clause, an error will be generated.&lt;br /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Sorting by Nonselected Columns&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;It is perfectly legal to sort data by a column that is not retrieved such as the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name
FROM Products
ORDER BY vend_id;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sorting-by-multiple-columns&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Sorting by Multiple Columns&lt;/h1&gt;
&lt;p&gt;To sort by multiple columns, simply specify the column names separated by commas.&lt;br /&gt;
The following code retrieves three columns and sorts the results by two of them -first by price and then by name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_id, prod_price, prod_name
FROM Products
ORDER BY prod_price, prod_name;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the sort sequence is exactly as specified. For example, the products are sorted by the &lt;code&gt;prod_name&lt;/code&gt; column only when multiple rows have the same &lt;code&gt;prod_price&lt;/code&gt; value. If all the values in the &lt;code&gt;prod_price&lt;/code&gt; column had been &lt;strong&gt;unique&lt;/strong&gt;, no data would have been sorted by &lt;code&gt;prod_name&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sorting-by-column-position&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Sorting by Column Position&lt;/h1&gt;
&lt;p&gt;Instead of naming out the columns to be sorted, we can put it the column number. The follwing goves the same output as the above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_id, prod_price, prod_name
FROM Products
ORDER BY 2, 3;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main limitation of this technique is you cannot sort by columns that are not in the &lt;code&gt;SELECT&lt;/code&gt; list However, you can mix and match actual column names and relative column positions in a single statement if needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;specifying-sort-direction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Specifying Sort Direction&lt;/h1&gt;
&lt;p&gt;Bt default, the columns selected are sorted in ascending order. To sort by descending order, the keyword &lt;code&gt;DESC&lt;/code&gt; must be specified. The opposite of &lt;code&gt;DESC&lt;/code&gt; is &lt;code&gt;ASC&lt;/code&gt;.&lt;br /&gt;
The following example sorts the products by price in descending order (most expensive first):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_id, prod_price, prod_name
FROM Products
ORDER BY prod_price DESC;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if you were to sort by multiple columns? The &lt;code&gt;DESC&lt;/code&gt; keyword only applies to the column name that directly precedes it. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_id, prod_price, prod_name
FROM Products
ORDER BY prod_price DESC, prod_name;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;prod_price&lt;/code&gt; column is sorted in descending order, but the &lt;code&gt;prod_name&lt;/code&gt; column (within each price) is still sorted in standard ascending order.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;If you want to sort descending on multiple columns, be sure each column has its own &lt;code&gt;DESC&lt;/code&gt; keyword.&lt;/p&gt;

&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Depending on your DBMS, &lt;em&gt;A&lt;/em&gt; might be same as &lt;em&gt;a&lt;/em&gt;, and &lt;em&gt;a&lt;/em&gt; come before &lt;em&gt;B&lt;/em&gt; or after &lt;em&gt;Z&lt;/em&gt;. If you do need an alternate sort order, you may not be able to accomplish this with a simple &lt;code&gt;ORDER BY&lt;/code&gt; clause.&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to SQL: 4. Filtering Data</title>
      <link>/readings/introduction-to-sql-filtering-data/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/readings/introduction-to-sql-filtering-data/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#using-the-where-clause&#34;&gt;Using the &lt;code&gt;WHERE&lt;/code&gt; Clause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-where-clause-operators&#34;&gt;The &lt;code&gt;WHERE&lt;/code&gt; Clause Operators&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#checking-against-a-single-value&#34;&gt;Checking Against a Single Value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#checking-for-nonmatches&#34;&gt;Checking for Nonmatches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#checking-for-a-range-of-values-using-between-operator&#34;&gt;Checking for a Range of Values using &lt;code&gt;BETWEEN&lt;/code&gt; operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#checking-for-no-value-using-is-null&#34;&gt;Checking for No Value using &lt;code&gt;IS NULL&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;This post is heavily based on &lt;a href=&#34;https://www.amazon.com/SQL-Minutes-Sams-Teach-Yourself/dp/0672336073&#34;&gt;Sams Teach Yourself SQL in 10 Minutes (Fourth Edition)&lt;/a&gt;. Please consider to buy the book if you find this post useful.&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;using-the-where-clause&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Using the &lt;code&gt;WHERE&lt;/code&gt; Clause&lt;/h1&gt;
&lt;p&gt;Within a &lt;code&gt;SELECT&lt;/code&gt; statement, data is filtered by specifying search criteria in the &lt;code&gt;WHERE&lt;/code&gt; clause. The &lt;code&gt;WHERE&lt;/code&gt; clause is specified right after the table name (the &lt;code&gt;FROM&lt;/code&gt; clause) as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name, prod_price
FROM Products
WHERE prod_price = 3.49;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following shows the output.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/tysql/04.Filter/filtercol.jpg&#34; /&gt;

&lt;/div&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;Position of &lt;code&gt;WHERE&lt;/code&gt; Clause&lt;/p&gt;
&lt;p&gt;When using both &lt;code&gt;ORDER BY&lt;/code&gt; and&lt;code&gt;WHERE&lt;/code&gt; clauses, make sure that &lt;code&gt;ORDER BY&lt;/code&gt; comes after the &lt;code&gt;WHERE&lt;/code&gt;, otherwise an error will be generated.&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;div id=&#34;the-where-clause-operators&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The &lt;code&gt;WHERE&lt;/code&gt; Clause Operators&lt;/h1&gt;
&lt;p&gt;SQL supports a whole range of conditional operators as listed as follows. Not all of these operators are supported by all DBMSs. Refer to your DBMS documentation to determine exactly what it supports.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/tysql/04.Filter/operators.jpg&#34; /&gt; Many DBMSs extend the standard set of operators, providing advanced filtering options. Refer to your DBMS documentation for more information.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;checking-against-a-single-value&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Checking Against a Single Value&lt;/h2&gt;
&lt;p&gt;Ex: List all products that cost less than $10:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name, prod_price
FROM Products
WHERE prod_price &amp;lt; 10;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ex: Retrieve all products costing $10 or less:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name, prod_price
FROM Products
WHERE prod_price &amp;lt;= 10;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;checking-for-nonmatches&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Checking for Nonmatches&lt;/h2&gt;
&lt;p&gt;Ex: List all products &lt;strong&gt;not&lt;/strong&gt; made by vendor DLL01:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT vend_id, prod_name
FROM Products
WHERE vend_id &amp;lt;&amp;gt; &amp;#39;DLL01&amp;#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Using Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The single quotes are used to delimit a string. If you are comparing a value against a column that is a string datatype, the delimiting quotes are required. Quotes are not used to delimit values used with numeric columns.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Ex: Do the same as above but use &lt;code&gt;!=&lt;/code&gt; insetad of &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT vend_id, prod_name
FROM Products
WHERE vend_id != &amp;#39;DLL01&amp;#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above doesnt work in Microsoft Access because it is not supported. &lt;code&gt;!=&lt;/code&gt; works in certain DBMS.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;checking-for-a-range-of-values-using-between-operator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Checking for a Range of Values using &lt;code&gt;BETWEEN&lt;/code&gt; operator&lt;/h2&gt;
&lt;p&gt;To check for a range of values, you can use the &lt;code&gt;BETWEEN&lt;/code&gt; operator. Let’s retrieve all products with a price between &lt;em&gt;$5&lt;/em&gt; and &lt;em&gt;$10&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name, prod_price
FROM Products
WHERE prod_price BETWEEN 5 AND 10;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When &lt;code&gt;BETWEEN&lt;/code&gt; is used, two values must be specified -the low end and high end of the desired range. The two values must also be separated by the &lt;code&gt;AND&lt;/code&gt; keyword. &lt;code&gt;BETWEEN&lt;/code&gt; matches all the values in the range, &lt;strong&gt;including&lt;/strong&gt; the specified start and end values.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;checking-for-no-value-using-is-null&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Checking for No Value using &lt;code&gt;IS NULL&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To determine if a value is NULL, you cannot simply check to see if = NULL. The IS NULL clause should be used.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT prod_name
FROM Products
WHERE prod_price IS NULL;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing is returned because everything is priced.&lt;/p&gt;
&lt;p&gt;The Customers table, however, does contain columns with NULL values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT cust_name
FROM CUSTOMERS
WHERE cust_email IS NULL;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;&lt;strong&gt;NULL and Non-matches&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you filter to select all rows that do not have a particular value, rows with a NULL will not be returned.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;It’s because of the special meaning of &lt;em&gt;unknown&lt;/em&gt;, the database does not know whether or not they match, and so they are not returned when filtering for matches or when filtering for non-matches.&lt;br /&gt;
When filtering data, make sure to verify that the rows with a NULL in the filtered column are really present in the returned data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Clustering: k-means, k-means &#43;&#43; and gganimate</title>
      <link>/post/clustering-k-means-k-means-and-gganimate/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/clustering-k-means-k-means-and-gganimate/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-problem&#34;&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#k-means-clustering&#34;&gt;K-means Clustering&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#implementation&#34;&gt;Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-simulation-and-visualization&#34;&gt;Data Simulation and Visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#k-means-clustering-1&#34;&gt;K-means ++ Clustering&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#implementations&#34;&gt;Implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visualization&#34;&gt;Visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#choosing-k---the-elbow-method&#34;&gt;Choosing K - the Elbow Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#next-step&#34;&gt;Next Step&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Clustering methods attempt to group object based on the similarities of the objects. For example, one can group their customers into several clusters so that one can aim a specific way of marketing to each type of customers.&lt;/p&gt;
&lt;p&gt;Since there is no preexisting group labels for each cluster, we can never know the accuracy of clustering methods unless using a simulated data.&lt;/p&gt;
&lt;p&gt;There are some complexities in clusterings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the number of clusters? We have no way to validate the results so we can’t even use cross-validation to choose one. Perhaps, using domain knowledge is the best way to validate the results. We will use the &lt;strong&gt;Elbow Method&lt;/strong&gt; to decide the &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; here.&lt;/li&gt;
&lt;li&gt;How do we define &lt;strong&gt;similar&lt;/strong&gt;? In other words, what is the similarity measure? Clustering results depend heavily on the measure of similarity. Some of the famous measures between two data points are:&lt;/li&gt;
&lt;li&gt;Pearson correlation between two points&lt;/li&gt;
&lt;li&gt;Distance between two points&lt;/li&gt;
&lt;li&gt;Number of matches between two points (i.e., having the same category)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am using the &lt;strong&gt;Distance&lt;/strong&gt;, the Euclidean distance to be specific, as the similarity measure in this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-problem&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The Problem&lt;/h1&gt;
&lt;p&gt;Let’s say we have &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; data vectors &lt;span class=&#34;math inline&#34;&gt;\(X_1, ..., X_n \in \mathbb{R}^p\)&lt;/span&gt; and we have &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; vector clusters with cluster centers of &lt;span class=&#34;math inline&#34;&gt;\(c_1, ..., c_k \in \mathbb{R}^p\)&lt;/span&gt;. We want to minimize the following error:&lt;br /&gt;
&lt;span class=&#34;math display&#34;&gt;\[R (c_1, ..., c_k) = \frac{1}{n} \sum_{i=1}^{n} \underset{1\leq j \leq k}{\mathrm{argmin}}||X_i - c_j||^2\]&lt;/span&gt; In other words, given a fixed number of cluster, &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;, we want to mimimize within cluster dissimilarity. This is calculated by taking the difference between each data points from its cluster centroid (the center, &lt;span class=&#34;math inline&#34;&gt;\(c_k\)&lt;/span&gt;), which also has &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; dimensions. This also means that we cluster the data points to the closest centroids from them.&lt;/p&gt;
&lt;p&gt;However, finding &lt;span class=&#34;math inline&#34;&gt;\(c_1, ..., c_k\)&lt;/span&gt; that minimizes &lt;span class=&#34;math inline&#34;&gt;\(R (c_1, ..., c_k)\)&lt;/span&gt; is NP-hard (as hard as nondeterministic polynomial time problem). It is not feasible to find: &lt;span class=&#34;math display&#34;&gt;\[\underset{c_1, ..., c_k}{argmin}\ R (c_1, ..., c_k)\]&lt;/span&gt; because we have to minimize over all possible assignments of &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; points to &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; clusters. The number of distinct assignments is: &lt;span class=&#34;math display&#34;&gt;\[S\ (n,k) = \frac{1}{K!}\sum_{k=1}^{K}(-1)^{K-k} {K \choose k} k^n\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;k-means-clustering&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;K-means Clustering&lt;/h1&gt;
&lt;p&gt;The Lloyd’s algorithm turns out to be the most famous iterative algorithm used to attempt minimizing the objective function.&lt;/p&gt;
&lt;p&gt;The algorithm is simple:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Partition the &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; objects into &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; initial clusters &lt;span class=&#34;math inline&#34;&gt;\(c_1,...,c_k\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Do the following:
&lt;ul&gt;
&lt;li&gt;Assign object &lt;span class=&#34;math inline&#34;&gt;\(X_i\)&lt;/span&gt; to cluster &lt;span class=&#34;math inline&#34;&gt;\(c_k\)&lt;/span&gt; that has the closest centroid(mean). Repeat this for &lt;span class=&#34;math inline&#34;&gt;\(i= 1,...,n\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Update the cluster centroids by taking the sample mean within each cluster.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Repeat 2 until no changes in cluster assignment is observed (means it has converged).&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;implementation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mykmeans &amp;lt;- function (data, k, centers = NULL, stop_crit = 10e-3, seed = 1001)
{

  # Initializations
  set.seed(seed)
  # Assigning the initial centroids. Random value will be used
  # if no values were specified
  if(is.null(centers)) centers = sample.int(nrow(data), k)
  centroid &amp;lt;- data[centers, ]
  # Keep a history of the centroid values for visualization purpose
  cen_hist = data.frame(centroid)
  # Randomly assign clusters to each observations
  cluster &amp;lt;- c(sample.int(k, nrow(data), replace = TRUE))
  # Keep a histpry of the data frame that includes assigned clusters
  # for visualization purpose
  data_hist &amp;lt;- data.frame(data,cluster)
  # Within group Sum of squares
  withinss = c()
  # size of each cluster
  size = c()
  # Does it converge?
  conver &amp;lt;- F
  # distance between old and updated centroids
  # Set it as arbitarily large
  dist_crit = 10e5
  # Number of iteration
  iter = 1
  
  while (conver == FALSE)
  {
    old_centroid = centroid
    
    # assign to cluster that has the closest centroid to a specific data point
    for (i in 1 : nrow(data))
    {
      dist = apply(centroid, 1, function(x) sum((x - data[i,])^2))
      cluster[i] = which.min(dist)
    }
    
    # Update the centroid mean
    for (j in 1 : k)
    {
      centroid[j, ] = apply(data[cluster == j, ], 2, mean)
    }
    
    ## Keep the history of the centroid and data + cluster
    cen_hist = rbind(cen_hist, data.frame(centroid))
    data_hist = rbind(data_hist, data.frame(data,cluster))
    
    # Is the stopping criteria met?
    dist_crit = mean((old_centroid - centroid)^2)
    if (dist_crit &amp;lt;= stop_crit) conver = TRUE
    
    # Update iteration
    iter = iter + 1
  }
  
  #### Sum of squares calculations#####
  for (m in 1 : k)
  {
    withinss[m] = sum((apply(data[cluster == m, ],1, 
                             function(x) x - apply(data[cluster == m, ],2,mean)))^2)
    size [m] = sum(cluster == m)
  }
  
  totss = sum(apply(data, 1, function(x) sum((x - apply(data,2,mean))^2)))
  tot.withinss = sum(withinss)
  
  return(list(data = data.frame(data,cluster),
              cluster = cluster,
              centroid = centroid,
              totss = totss,
              withinss = withinss,
              tot.withinss = tot.withinss,
              betweenss = totss - tot.withinss,
              size = size,
              cen_hist = cen_hist,
              data_hist = data_hist,
              iterations = iter))
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-simulation-and-visualization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Simulation and Visualization&lt;/h2&gt;
&lt;p&gt;The following simulation is adapted from &lt;a href=&#34;http://enhancedatascience.com/2017/10/24/machine-learning-explained-kmeans/&#34; class=&#34;uri&#34;&gt;http://enhancedatascience.com/2017/10/24/machine-learning-explained-kmeans/&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;5 clusters with 300 observarions each are simulated. Let’s take a look.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(MASS)
require(ggplot2)
set.seed(1234)
set1=mvrnorm(n = 300, c(-4,10), matrix(c(1.5,1,1,1.5),2))
set2=mvrnorm(n = 300, c(5,7), matrix(c(1,2,2,6),2))
set3=mvrnorm(n = 300, c(-1,1), matrix(c(4,0,0,4),2))
set4=mvrnorm(n = 300, c(10,-10), matrix(c(4,0,0,4),2))
set5=mvrnorm(n = 300, c(3,-3), matrix(c(4,0,0,4),2))
DF=data.frame(rbind(set1,set2,set3,set4,set5),cluster=as.factor(c(rep(1:5,each=300))))
ggplot(DF,aes(x=X1,y=X2,color=cluster))+geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-cllustering-k-means-k-means-and-gganimate_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, let’s apply the K-means clustering function that we just defined. We can also visualize how K-means is performing in this dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k = 5
res=mykmeans(DF[1:2],k=k)
res$centroid$cluster=1:k
res$data$isCentroid=F
res$centroid$isCentroid=T
data_plot2=rbind(res$centroid,res$data)

ggplot(data_plot2,aes(x=X1,y=X2,color=as.factor(cluster),
                           size=isCentroid,alpha=isCentroid)) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-cllustering-k-means-k-means-and-gganimate_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It appears that the K-means clustering is working well here since the 5 clusters are separated correctly.&lt;/p&gt;
&lt;p&gt;Let’s look at how the K-means algorithm is working in the following visualization. We can see how the &lt;span class=&#34;math inline&#34;&gt;\(k = 5\)&lt;/span&gt; centroid is moving and form the 5 clusters correctly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-cllustering-k-means-k-means-and-gganimate_files/figure-html/unnamed-chunk-4.gif&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;k-means-clustering-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;K-means ++ Clustering&lt;/h1&gt;
&lt;p&gt;The problem with k-means clustering is that it only provide local minimum but not global minimum. In other words, where you set as the inital centroids plays a big role. Thus, the usual method is to use different initial values, look for the stable solution (clusters) and choose the best initial value from there.&lt;/p&gt;
&lt;p&gt;In 2007, David Arthur and Sergei Vassilvitskii introduced &lt;a href=&#34;http://ilpubs.stanford.edu:8090/778/1/2006-13.pdf&#34;&gt;k-means++&lt;/a&gt;.&lt;br /&gt;
The big idea is that instead of choosing &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; centroids randomly, it’s better to choose the centroids such that they are far from each other. The major advantage of this approach is that we don’t have to try several initial values. This cuts down the computational time a lot.&lt;/p&gt;
&lt;p&gt;The following is the algorithm of choosing the initial centroids:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Denote a randomly chosen point as &lt;span class=&#34;math inline&#34;&gt;\(s_1\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;For the &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; th iteration, &lt;span class=&#34;math inline&#34;&gt;\(l = 2,..., k\)&lt;/span&gt;, compute the squared distances, &lt;span class=&#34;math inline&#34;&gt;\(D_i^2\)&lt;/span&gt;: &lt;span class=&#34;math display&#34;&gt;\[D_i^2 = min \{||Y_i -s_1||^2,..., ||Y_i -s_{l-1}||^2 \}\]&lt;/span&gt;. The probability that &lt;span class=&#34;math inline&#34;&gt;\(Y_i\)&lt;/span&gt; is chosen as the centroid, &lt;span class=&#34;math inline&#34;&gt;\(s_l\)&lt;/span&gt;, is &lt;span class=&#34;math display&#34;&gt;\[D_i^2/\sum_{j}D_j^2\]&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(i \neq j\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(i, j = 1,..., n\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Repeat this until we collect &lt;span class=&#34;math inline&#34;&gt;\(s_1, ..., s_k\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Use the collected points as the staring centroids for k-means algorithm.&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;implementations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Implementations&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;kmeanplus &amp;lt;- function(data, k, ...)
{
  n = nrow(data)
  
  # Place holder
  centroids &amp;lt;- rep(NA, k)
  dist &amp;lt;- matrix(nrow = n, ncol = k-1)
  
  # Initialize probability = 1 for all data points
  probs = rep(1, n)
  
  for (i in 1: (k-1))
  {
    # The s_k
    centroids[i] = sample.int(n, 1, prob = probs)
    # The D_i^2
    dist[,i] = (apply(data, 1, function(x) sum((x- data[centroids[i], ])^2)))
    # Not counting the exact probabily here. All we care is the relative weight.
    probs = apply(dist, 1, function(y) y[which.min(y)])
  }
  centroids[k] = sample.int(n, 1, prob = probs)
  
  res &amp;lt;- mykmeans(data = data, centers = centroids,  k = k, ...)
  return(res)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization&lt;/h2&gt;
&lt;p&gt;Let’s reuse the same dataset as above and visualize the clustering process.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;res &amp;lt;-  kmeanplus(DF[1:2], k = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-cllustering-k-means-k-means-and-gganimate_files/figure-html/unnamed-chunk-7.gif&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The number of iterations is 7 this time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;choosing-k---the-elbow-method&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Choosing K - the Elbow Method&lt;/h1&gt;
&lt;p&gt;The Elbow Method will be used in this case. Recall that all we were doing is to minimize the within cluster sum of squares. We can vary the value of &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;, say from 3 to 7, and plot the within sum of squares against the &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; s. The location of a bend in the plot can be considered as the optimal &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; because it means that further increasing number of &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; is not decreasing the within sum of squares a lot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1001)

# Compute and plot wss for k = 3 to k = 7
k.values &amp;lt;-3:7

wss = c()

for (k in k.values)
{
  wss = c(wss, kmeanplus(DF[1:2], k = k)$tot.withinss)
}

plot(k.values, wss,
       type=&amp;quot;b&amp;quot;, pch = 19, frame = FALSE, 
       xlab=&amp;quot;Number of clusters K&amp;quot;,
       ylab=&amp;quot;Total within-clusters sum of squares&amp;quot;,
       col = &amp;quot;dodgerblue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-cllustering-k-means-k-means-and-gganimate_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The Elbow is seen at &lt;span class=&#34;math inline&#34;&gt;\(k = 5\)&lt;/span&gt; and that is congruent with our simulated 5 clusters.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;next-step&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Next Step&lt;/h1&gt;
&lt;p&gt;There are different ways of choosing the number of clusters &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; in adddition to the Elbow method. One can also try on more data simulations and discover the limitations of k-means clustering.&lt;/p&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://normaldeviate.wordpress.com/2012/09/30/the-remarkable-k-means/&#34; class=&#34;uri&#34;&gt;https://normaldeviate.wordpress.com/2012/09/30/the-remarkable-k-means/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://enhancedatascience.com/2017/10/24/machine-learning-explained-kmeans/&#34; class=&#34;uri&#34;&gt;http://enhancedatascience.com/2017/10/24/machine-learning-explained-kmeans/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ilpubs.stanford.edu:8090/778/1/2006-13.pdf&#34; class=&#34;uri&#34;&gt;http://ilpubs.stanford.edu:8090/778/1/2006-13.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uc-r.github.io/kmeans_clustering#optimal&#34; class=&#34;uri&#34;&gt;https://uc-r.github.io/kmeans_clustering#optimal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>gganimate: Animations with ggplot2</title>
      <link>/post/gganimate-animations-with-ggplot2/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/gganimate-animations-with-ggplot2/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#demo-dataset&#34;&gt;Demo dataset&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#simple-animation&#34;&gt;Simple Animation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fixing-running-gganimate-problem&#34;&gt;Fixing running &lt;code&gt;gganimate()&lt;/code&gt; problem&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#install-imagemagick-through-r&#34;&gt;Install ImageMagick through R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#error-after-installing-imagemagick&#34;&gt;Error after installing ImageMagick&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#customization&#34;&gt;Customization&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#highlight-points-rather-than-moving-them&#34;&gt;Highlight points (rather than moving them)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cumulative-layer&#34;&gt;Cumulative Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matching-frame-with-other-dimension-variables&#34;&gt;Matching &lt;code&gt;frame&lt;/code&gt; with other dimension (variables)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#statistics-summarization&#34;&gt;Statistics Summarization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#animation-options&#34;&gt;Animation Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;The following content is based on &lt;a href=&#34;https://github.com/dgrtwo/gganimate&#34; class=&#34;uri&#34;&gt;https://github.com/dgrtwo/gganimate&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;install&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Install&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(!require(devtools)) install.packages(&amp;quot;devtools&amp;quot;)
if(!require(gganimate)) devtools::install_github(&amp;quot;dgrtwo/gganimate&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main argument is the &lt;code&gt;frame&lt;/code&gt; ( the time frame/ time points in the argument). Treat &lt;code&gt;frame&lt;/code&gt; as another aesthetics such as &lt;strong&gt;size, color, x and y&lt;/strong&gt;. Then, use the &lt;code&gt;gganimate()&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;demo-dataset&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Demo dataset&lt;/h1&gt;
&lt;p&gt;The dataset that will be used is &lt;code&gt;gapminder&lt;/code&gt;. This is an excerpt of the Gapminder data on life expectancy, GDP per capita, and population by country. Let’s install the package to get the data and take a look on it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(!require(gapminder)) install.packages(&amp;quot;gapminder&amp;quot;)
# Loading the two libraries required
library(gapminder)
head(gapminder)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   country     continent  year lifeExp      pop gdpPercap
##   &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Afghanistan Asia       1952    28.8  8425333      779.
## 2 Afghanistan Asia       1957    30.3  9240934      821.
## 3 Afghanistan Asia       1962    32.0 10267083      853.
## 4 Afghanistan Asia       1967    34.0 11537966      836.
## 5 Afghanistan Asia       1972    36.1 13079460      740.
## 6 Afghanistan Asia       1977    38.4 14880372      786.&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;simple-animation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simple Animation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Build a scatterplot the Life Expectancy against gdp per capita across years.&lt;/li&gt;
&lt;li&gt;Use color and sizes to show the continents and population size.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** The only thing different from usual plotting is the &lt;code&gt;frame&lt;/code&gt; aesthetics. Then, we use the &lt;code&gt;gganimate()&lt;/code&gt; function**.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load required package
library(gapminder)
library(ggplot2)
library(gganimate)

## Basic Scatterplot
p &amp;lt;- ggplot(gapminder, mapping = aes(x = gdpPercap, y = lifeExp, 
                           size = pop, color = continent, frame = year)) +
  geom_point() +
  scale_x_log10()

# Animation
gganimate(p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-gganimate-animations-with-ggplot2_files/figure-html/unnamed-chunk-3.gif&#34; width=&#34;672&#34; /&gt; Note that the axis remains the same, making comparison across time easier.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Set &lt;code&gt;fig.show = &amp;quot;animate&amp;quot;&lt;/code&gt; chunk option if you are using Rmd and knitr. Add in &lt;code&gt;fig.show = &amp;quot;animate&amp;quot;, ffmpeg.format=&amp;lsquo;gif&amp;rsquo;, dev=&amp;lsquo;jpeg&amp;rsquo;&lt;/code&gt; if you are using blogdown.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;The animation could be saved by the followings:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gganimate(p, &amp;quot;output.gif&amp;quot;)
gganimate(p, &amp;quot;output.mp4&amp;quot;)
gganimate(p, &amp;quot;output.swf&amp;quot;)
gganimate(p, &amp;quot;output.html&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;ffmpeg and ImageMagick drivers should be installed on your computer.&lt;/p&gt;

&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;I met some problems with running the &lt;code&gt;gganimate(p)&lt;/code&gt; and I found the following solution.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@DaveQuartey/solutions-to-installing-imagemagick-for-gganimate-r-package-errors-8b36d0736f85&#34;&gt;Solutions to “Installing #ImageMagick for #gganimate R package” errors&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;div id=&#34;fixing-running-gganimate-problem&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fixing running &lt;code&gt;gganimate()&lt;/code&gt; problem&lt;/h2&gt;
&lt;p&gt;Just in case that the page is removed in the future, I am going to copy and paste whatever is in that page:&lt;/p&gt;
&lt;div id=&#34;install-imagemagick-through-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install ImageMagick through R&lt;/h3&gt;
&lt;p&gt;Do this through the following. Make sure to select &lt;code&gt;legacy utilities&lt;/code&gt; whiles installing ImageMagick to install convert.exe on your machine.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;installr&amp;quot;)){ 
install.packages(&amp;quot;installr&amp;quot;)
library(installr)
install.imagemagick(&amp;quot;https://www.imagemagick.org/script/download.php&amp;quot;
} else {
library(installr)
install.imagemagick(&amp;quot;https://www.imagemagick.org/script/download.php&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This downloads ImageMagick onto the PC. Rerun the &lt;code&gt;gganimate()&lt;/code&gt; code after this step.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;error-after-installing-imagemagick&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Error after installing ImageMagick&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cannot find ImageMagick with convert = &amp;quot;convert&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install ImageMagick and point R path to its folder . Make sure to restart RStudio after pointing R path to its folder.&lt;/p&gt;
&lt;div id=&#34;path-through-r&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Path through R&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dgrtwo/gganimate/issues/22#issuecomment-264352060&#34;&gt;Point&lt;/a&gt; R path to its folder in R using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Sys.setenv(PATH = paste(&amp;quot;C:/Program Files/ImageMagick/bin&amp;quot;,
Sys.getenv(&amp;quot;PATH&amp;quot;), sep = &amp;quot;;&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;restart-rstudio&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Restart Rstudio&lt;/h4&gt;
&lt;p&gt;if the following error comes up after installing ImageMagick and directing R to its path. Just restart Rstudio.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Program&amp;#39; is not recognized as an internal or external command,
operable program or batch file.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;customization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Customization&lt;/h2&gt;
&lt;div id=&#34;highlight-points-rather-than-moving-them&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Highlight points (rather than moving them)&lt;/h3&gt;
&lt;p&gt;What if I want to highlight the change in the &lt;code&gt;population&lt;/code&gt; throughout the years but not moving it?&lt;/p&gt;
&lt;p&gt;All I need to do is to remove the &lt;code&gt;frame&lt;/code&gt; aesthetics from the global chunk but add it into specific &lt;code&gt;geom&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p2 &amp;lt;- ggplot(gapminder, mapping = aes(x = gdpPercap, y = lifeExp, size = pop)) +
  geom_point() +
  geom_point(aes(frame = year), color = &amp;quot;violetred&amp;quot;) +
  scale_x_log10()

gganimate(p2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-gganimate-animations-with-ggplot2_files/figure-html/unnamed-chunk-6.gif&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cumulative-layer&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Cumulative Layer&lt;/h3&gt;
&lt;p&gt;This can be done by adding an aesthetic &lt;code&gt;cumulative = TRUE&lt;/code&gt;. It’s useful for building path over time. Also note that the &lt;code&gt;group&lt;/code&gt; aesthetics is used so that it knows which variables to accumulate on.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p3 &amp;lt;- ggplot(gapminder, mapping = aes(x = gdpPercap, y = lifeExp, frame = year)) +
  geom_path(aes(cumulative = TRUE, group = country)) +
  scale_x_log10() +
  facet_wrap(~continent)

gganimate(p3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-gganimate-animations-with-ggplot2_files/figure-html/unnamed-chunk-7.gif&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matching-frame-with-other-dimension-variables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Matching &lt;code&gt;frame&lt;/code&gt; with other dimension (variables)&lt;/h3&gt;
&lt;p&gt;Let’s try to match &lt;code&gt;continent&lt;/code&gt; to &lt;code&gt;frame&lt;/code&gt; aesthetics&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p4 &amp;lt;- ggplot(gapminder, 
             mapping = aes(x = gdpPercap, y = lifeExp, size = pop, frame = continent)) +
  geom_point(color = &amp;quot;blue&amp;quot;) +
  scale_x_log10()

gganimate(p4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-gganimate-animations-with-ggplot2_files/figure-html/unnamed-chunk-8.gif&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;statistics-summarization&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Statistics Summarization&lt;/h3&gt;
&lt;p&gt;Always add in &lt;code&gt;group&lt;/code&gt; in the &lt;code&gt;geom&lt;/code&gt; (such as &lt;code&gt;geom_smoooth()&lt;/code&gt;) or the statistics will be calculated across all frames and thus be constant in animation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scales = &amp;quot;free&amp;quot;&lt;/code&gt; was added because the range of x axis is fixed by default.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p5 &amp;lt;- ggplot(gapminder, 
             mapping = aes(x = gdpPercap, y = lifeExp, size = pop, frame = year)) +
  geom_point() +
  geom_smooth(aes(group = year), method = &amp;quot;lm&amp;quot;, show.legend = FALSE) +
  facet_wrap(~continent, scales = &amp;quot;free&amp;quot;) +
  scale_x_log10() 

gganimate(p5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-gganimate-animations-with-ggplot2_files/figure-html/unnamed-chunk-9.gif&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;animation-options&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Animation Options&lt;/h3&gt;
&lt;p&gt;You can control your animation with the same options described in &lt;code&gt;ani.options&lt;/code&gt; from the &lt;code&gt;animation&lt;/code&gt; package, passed directly to &lt;code&gt;gganimate&lt;/code&gt; or to &lt;code&gt;ani.options&lt;/code&gt; beforehand. Note that you always need to add the parameters passed to &lt;code&gt;gganimate&lt;/code&gt; to the chunks in the knitr of Rmd.&lt;/p&gt;
&lt;p&gt;Now, let’s try to set the &lt;code&gt;interval&lt;/code&gt; argument and make the animation goes faster.&lt;/p&gt;
&lt;p&gt;We will start with passing the argument directly intto &lt;code&gt;gganimate()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gganimate(p, interval = .2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-gganimate-animations-with-ggplot2_files/figure-html/unnamed-chunk-10.gif&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In fact, simply making the chunk to include &lt;code&gt;interval = 0.2&lt;/code&gt; is good enough in Rmd.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gganimate(p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-gganimate-animations-with-ggplot2_files/figure-html/unnamed-chunk-11.gif&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s do the same thing but a instead using the &lt;code&gt;ani.options&lt;/code&gt;. This is how you do it in Rstudio in general.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(animation)
ani.options(interval = .2)
gganimate(p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-19-gganimate-animations-with-ggplot2_files/figure-html/unnamed-chunk-12.gif&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Cross Validation Function for Classifier</title>
      <link>/post/cross-validation-function-for-classifier/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/cross-validation-function-for-classifier/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#self-defined-functions&#34;&gt;Self-defined functions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cvclassifier&#34;&gt;&lt;code&gt;cvclassifier&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#arguments-and-values&#34;&gt;Arguments and Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#implementations&#34;&gt;Implementations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#classpred.cv&#34;&gt;&lt;code&gt;classpred.cv&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#arguments-and-values-1&#34;&gt;Arguments and Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#implementations-1&#34;&gt;Implementations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#simulation-errors-and-knn-boundaries&#34;&gt;Simulation, Errors and KNN Boundaries&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#example-1&#34;&gt;Example 1&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#simulate-data&#34;&gt;Simulate Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#training-and-testing-errors&#34;&gt;Training and Testing Errors&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cross-validation&#34;&gt;Cross Validation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#decision-boundaries&#34;&gt;Decision Boundaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-2&#34;&gt;Example 2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#simulate-data-1&#34;&gt;Simulate Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#training-and-testing-errors-1&#34;&gt;Training and Testing Errors&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cross-validation-1&#34;&gt;Cross Validation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#decision-boundaries-1&#34;&gt;Decision Boundaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#next-steps&#34;&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;As mentioned in the &lt;a href=&#34;https://theanlim.rbind.io/post/k-nearest-neighbour-classifier-self-written-function/&#34;&gt;previous post&lt;/a&gt;, the natural step after creating a KNN classifier is to define another function that can be used for cross-validation (CV).&lt;/p&gt;
&lt;p&gt;The kind of CV function that will be created here is only for classifier with &lt;strong&gt;one&lt;/strong&gt; tuning parameter. This includes the KNN classsifier, which only tunes on the parameter &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;self-defined-functions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Self-defined functions&lt;/h1&gt;
&lt;div id=&#34;cvclassifier&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;cvclassifier&lt;/code&gt;&lt;/h2&gt;
&lt;div id=&#34;arguments-and-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Arguments and Values&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cvclassifier&lt;/code&gt; has the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data: These are the training data&lt;/li&gt;
&lt;li&gt;class: These are classes (or groups) for the training data&lt;/li&gt;
&lt;li&gt;classifier: The type of classifier (i.e., KNN classifier)&lt;/li&gt;
&lt;li&gt;fold: Number of folds used in cross validation. The default value is 10.&lt;/li&gt;
&lt;li&gt;seed: Seed number for partitioning data into folds. The default value is 1001.&lt;/li&gt;
&lt;li&gt;… : Any arguments to be passed to the classifier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that it is assumed that the classifier has the arguments in the following order: &lt;strong&gt;classifier(traindat, testdat, trainclass, …)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cvclassifier&lt;/code&gt; returns the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cverror: The cross-validation error for the specified number of folds and tuning parameter value.&lt;/li&gt;
&lt;li&gt;trainpred: The predicted classes for the training data for the specified tuning parameter value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;implementations&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Implementations&lt;/h3&gt;
&lt;p&gt;The steps of implementing &lt;code&gt;cvclassifier&lt;/code&gt;:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Make sure that the number of folds is smaller than number of observations. Abort if that is not satisfied.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Set a seed value and shuffle the rows of the dataset (means the &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;) before partitioning into &lt;em&gt;m&lt;/em&gt; folds. Make sure to keep a copy of the original dataset for future use.&lt;/li&gt;
&lt;li&gt;Assign indexes showing which fold that each row belongs to. Try to make the number of observation in each group to be the same. If not possible, randomly assign the remaining observation into any folds.&lt;/li&gt;
&lt;li&gt;For &lt;span class=&#34;math inline&#34;&gt;\(i = 1,..., m\)&lt;/span&gt;, use the &lt;span class=&#34;math inline&#34;&gt;\(ith\)&lt;/span&gt; fold as the testing data and the &lt;span class=&#34;math inline&#34;&gt;\(m-1\)&lt;/span&gt; folds as the training data. With a specified tuning parameter value, use the classifier to predict the classes of testing data and record the rate of misclassification. Repeat this step for &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; times.&lt;/li&gt;
&lt;li&gt;Return the average error rate and the predicted classes using the whole training data.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cvclassifier &amp;lt;-  function(data, class, classifier, fold = 10, seed = 1001, ...)
{
  # Condition check first
  if (nrow(data) &amp;lt; fold) try(stop(&amp;quot;Number of folds is greater than number of observations.\n Reduce numder of folds.&amp;quot;))
  
  # Set a random seed to control for results
  set.seed(seed)
  # Make a copy of original dataand class
  oridata = data
  oriclass = class
  # Shuffle data and break into k folds
  shuffle_index &amp;lt;- sample.int(nrow(data))
  data &amp;lt;- data[shuffle_index, ]
  class &amp;lt;- class[shuffle_index]
  
  # Partition data (into m folds)
  num_per_fold &amp;lt;- nrow(data) %/% fold
  remaining &amp;lt;- nrow(data) %% fold
  # Initialize space holder that deffines which fold each observation belongs to
  part_data &amp;lt;- c()
  # Allocating folds
  for (j in 1:fold)
  {
    part_data &amp;lt;- c(part_data, rep(j, num_per_fold))
  }
  # Fill in the remaining randomly into any fold
  if(remaining != 0){
    for (k in 1:remaining)
    {
      part_data &amp;lt;- c(part_data, rep(sample.int(fold,1), 1))
    }
  }
  # For each fold, use the classsifer to fit and calculate testing error
  # Initialize error rate
  err &amp;lt;- 0
  for (i in 1 : fold)
  {
    test_index = which(part_data == i, arr.ind = TRUE)
    train_index &amp;lt;-  -test_index
    testdat &amp;lt;- data[test_index,]; testclass = class[test_index]
    traindat &amp;lt;- data[train_index,]; trainclass = class[train_index]
    
    ## Use classifier
    pred &amp;lt;- classifier(traindat, testdat, trainclass, ...)
    err &amp;lt;- err + mean(pred != testclass)
  }
  
  # The avearge of error
   err &amp;lt;- err/fold
  
  # Predicted values of all data
   pred_train &amp;lt;- classifier(oridata, oridata, oriclass, ...)

  # Return the results
  return(list(cverror = err, trainpred = pred_train))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function defined here is good enough to perform cross validation with a specified tuning parameter value. Let’s define another function that allows us to try on a range of tuning parameter values before choosing the best one.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;classpred.cv&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;classpred.cv&lt;/code&gt;&lt;/h2&gt;
&lt;div id=&#34;arguments-and-values-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Arguments and Values&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;classpred.cv&lt;/code&gt; has the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;traindat: The training dataset&lt;/li&gt;
&lt;li&gt;trainclass: The training data’s classes&lt;/li&gt;
&lt;li&gt;testdat: The testing dataset.&lt;/li&gt;
&lt;li&gt;testclass: The testing data’s classes&lt;/li&gt;
&lt;li&gt;classifier: Type of classifier to be used such as KNN classifier.&lt;/li&gt;
&lt;li&gt;parameter: Tuning parameter values. It is usually entered as a vector. The default value is NULL.&lt;/li&gt;
&lt;li&gt;fold: &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; fold for CV purpose. The default value is 10.&lt;/li&gt;
&lt;li&gt;seed: Seed value. The default value is 1001.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;classpred.cv&lt;/code&gt; returns the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;train_pred: Predicted classes for training data.&lt;/li&gt;
&lt;li&gt;train_err: Training data error rate.&lt;/li&gt;
&lt;li&gt;test_pred: Predicted classes for testing data. The prediction is done based on the parameter value that gives the lowest cross-validated error.&lt;/li&gt;
&lt;li&gt;test_err: Testing data error rate.&lt;/li&gt;
&lt;li&gt;parameter: Values of parameter used.&lt;/li&gt;
&lt;li&gt;best_param: The best tuning parameter. It’s the parameter value that gives the lowest CV error.&lt;/li&gt;
&lt;li&gt;cverror: Cross-validated errors in training data for all parameter values.&lt;/li&gt;
&lt;li&gt;cvpred: Predicted classes for training data for all parameter values.&lt;/li&gt;
&lt;li&gt;plot: Allow user to plot &lt;strong&gt;cverror&lt;/strong&gt; vs &lt;strong&gt;parameter&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;implementations-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Implementations&lt;/h3&gt;
&lt;p&gt;The steps of implementing &lt;code&gt;classpred.cv&lt;/code&gt;:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Make sure that at least a tuning parameter value is provided. Abort if no value was provided.&lt;/li&gt;
&lt;li&gt;For each of the parameter values, collect the cross-validated error and train data predicted classes from the &lt;code&gt;cvclassifier&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Save the best training data predicted classes. The predicted classes are chosen by using the tuning parameter value that minimizes the cross-validation error, &lt;span class=&#34;math inline&#34;&gt;\(tune_{best}\)&lt;/span&gt;. Calculate the training error too.&lt;/li&gt;
&lt;li&gt;Predict the classses for testing data using &lt;span class=&#34;math inline&#34;&gt;\(tune_{best}\)&lt;/span&gt; and calculate the testing error.&lt;/li&gt;
&lt;li&gt;Using ggplot2 to create and save a plot object.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;classpred.cv &amp;lt;- function(traindat, trainclass, testdat, testclass,
                         classifier, parameter=NULL, fold = 10, seed = 1001)
{
  if (is.null(parameter)) try(stop (&amp;quot;No parameter range stated&amp;quot;))
  
  trainclass &amp;lt;- as.factor(trainclass)
  # prediction list
  cvpred &amp;lt;- list()
  ## error list
  cverror &amp;lt;- c()
  
  for (i in parameter)
  {
    results &amp;lt;- cvclassifier(traindat, trainclass, classifier,
                            fold, seed, i)
    cvpred [[i]] &amp;lt;- results$trainpred
    cverror &amp;lt;- c(cverror, results$cverror)
  }
  
  #Clearing up the NULL elements
  cvpred[sapply(cvpred,is.null)] &amp;lt;- NULL

  train_pred = cvpred [[which.min(cverror)]]
  train_err &amp;lt;- mean(train_pred!=trainclass)
  
  #Predict using the best parameter
  test_pred = classifier(traindat, testdat, 
                         trainclass, parameter[which.min(cverror)])
  
  # calculated test error
  test_err = mean(test_pred!=testclass)
  
  
  cat(&amp;quot;The best parameter is &amp;quot;, parameter[which.min(cverror)], 
      &amp;quot;with cross-validated error of &amp;quot;, cverror[which.min(cverror)], &amp;quot;.\n&amp;quot;)
  cat(&amp;quot;The training error using parameter = &amp;quot;, parameter[which.min(cverror)], 
      &amp;quot; is &amp;quot;, train_err, &amp;quot;. \n&amp;quot;)
  cat(&amp;quot;The testing error using parameter = &amp;quot;, parameter[which.min(cverror)], 
      &amp;quot; is &amp;quot;, test_err, &amp;quot;.&amp;quot;)
  
  require(ggplot2)
  p.plot &amp;lt;- qplot(data =as.data.frame(cbind(parameter,cverror)),
                  x = parameter,
                  y = cverror,
                  geom = c(&amp;quot;point&amp;quot;, &amp;quot;line&amp;quot;),
                  main = &amp;quot;Cross Validation Error across parameter values&amp;quot;,
                  xlab = &amp;quot;Values of parameter&amp;quot;,
                  ylab = &amp;quot;C.V. Error&amp;quot;,
                  colour = I(&amp;quot;dodgerblue&amp;quot;),
                  size = I(1))
  
  return(list(train_pred=train_pred, 
         train_err = train_err,
         test_pred = test_pred,
         test_err = test_err,
         parameter = parameter,
         best_param = parameter[which.min(cverror)],
         cverror = cverror,
         cvpred =  cvpred,
         plot = p.plot))
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;simulation-errors-and-knn-boundaries&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Simulation, Errors and KNN Boundaries&lt;/h1&gt;
&lt;div id=&#34;example-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example 1&lt;/h2&gt;
&lt;div id=&#34;simulate-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Simulate Data&lt;/h3&gt;
&lt;p&gt;Lets generate some data in two dimensions. Three classes (groups) are created.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1001); n = 600
x = matrix(rnorm(n, sd = 4),n/2,2)
class = rep(c(1,2,3),each = n/6)
x[class == 1,] = x[class == 1,] + 7
x[class == 2,] = x[class == 2,] + 12
x[class == 2,2] = x[class == 2,2] - 15
plot(x,col = c(&amp;quot;orangered&amp;quot;, &amp;quot;navyblue&amp;quot;, &amp;quot;green3&amp;quot;)[class],pch = 20, xlab = &amp;quot;x1&amp;quot;, ylab = &amp;quot;x2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-16-cross-validation-function-for-classifier_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;training-and-testing-errors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Training and Testing Errors&lt;/h3&gt;
&lt;p&gt;First, let’s split the dataset into training and testing data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1001)
train = sample.int(n/2, n/4); test = -train
x.train = x[train,]; x.test = x[test,]
class.train = class[train]; class.test = class[test]&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;cross-validation&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Cross Validation&lt;/h4&gt;
&lt;p&gt;Let’s use the &lt;code&gt;classpred.cv&lt;/code&gt; function to choose the best number of &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; depending on the cross-validated error. Let’s use 10 folds in this case and set the tuning parameter values range from 1 to 100.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pred = classpred.cv(x.train, as.factor(class.train), x.test, class.test,
                    myknn, parameter = 1:100, fold = 10, seed = 1001)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The best parameter is  17 with cross-validated error of  0.1066667 .
## The training error using parameter =  17  is  0.1066667 . 
## The testing error using parameter =  17  is  0.1066667 .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can even plot the cross validation error as a function of tuning parameter using &lt;code&gt;pred$plot&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pred$plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-16-cross-validation-function-for-classifier_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;decision-boundaries&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Decision Boundaries&lt;/h3&gt;
&lt;p&gt;Let’s visualise the decision boundary with three separate groups. We will be using the &lt;code&gt;make.grid&lt;/code&gt; function defined in the [previous post] (&lt;a href=&#34;https://theanlim.rbind.io/post/k-nearest-neighbour-classifier-self-written-function/&#34; class=&#34;uri&#34;&gt;https://theanlim.rbind.io/post/k-nearest-neighbour-classifier-self-written-function/&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgrid = make.grid(x, n = 150)
ygrid = myknn(x,xgrid, class, k = pred$best_param)
plot(xgrid,col=c(&amp;quot;orange&amp;quot;,&amp;quot;dodgerblue&amp;quot;,&amp;quot;palegreen3&amp;quot;)[as.numeric(ygrid)],pch = 20,cex = .2, main = paste(&amp;quot;K = &amp;quot;, pred$best_param))
points(x,col = c(&amp;quot;orangered&amp;quot;, &amp;quot;navyblue&amp;quot;, &amp;quot;green3&amp;quot;)[class],pch = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-16-cross-validation-function-for-classifier_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;example-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example 2&lt;/h2&gt;
&lt;p&gt;Let’s try working on another example. We will start with simulating the data first. This data is simulated such that the overlap between classes is minimal.&lt;/p&gt;
&lt;div id=&#34;simulate-data-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Simulate Data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1001)
r1 = runif(n/3, -1,1)
r2 = c(runif(n/6,-2,-1), runif(n/6,1,2))
r3 = -r2
rad = seq(1,2*pi, length = n/3)
x1 &amp;lt;- c(r1*cos(rad), r2*cos(rad), r3*cos(rad) )
x2 &amp;lt;- c(r1*sin(rad), r2*sin(rad), r3*sin(rad))
x = cbind(x1,x2)
class = rep(c(1,2, 3), each=n/3 )
plot(x1, x2 , col = c(&amp;quot;orangered&amp;quot;, &amp;quot;navyblue&amp;quot;, &amp;quot;green3&amp;quot;)[class], pch = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-16-cross-validation-function-for-classifier_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt; The aim in this example in to explore whether KNN classifier is able to distiguish classes that are nested (i.e., the orange dots are surrounded by two different classes)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;training-and-testing-errors-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Training and Testing Errors&lt;/h3&gt;
&lt;p&gt;First, let’s split the dataset into training and testing data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1001)
train = sample.int(n, n/2)
test = -train
x.train = x[train,]
x.test = x[test,]
class.train = class[train]; class.test = class[test]&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;cross-validation-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Cross Validation&lt;/h4&gt;
&lt;p&gt;Again, let’s use 10 folds in this case and set the tuning parameter values range from 1 to 100.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pred = classpred.cv(x.train, as.factor(class.train), x.test, class.test,
                    myknn, parameter = 1:100, fold = 10, seed = 1001)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The best parameter is  5 with cross-validated error of  0.04333333 .
## The training error using parameter =  5  is  0.03 . 
## The testing error using parameter =  5  is  0.04 .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plot the cross validation error as a function of tuning parameter using &lt;code&gt;pred$plot&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pred$plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-16-cross-validation-function-for-classifier_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The plot shows that a lower value of &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; performs better as it has a lower cross validation error. This makes sense because, by definition, increasing the number of &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; expands its neighbourhood in a &lt;strong&gt;circular&lt;/strong&gt; way and that is only helpful to the orange points on the plot, but not the others. The other two groups form curvature shapes on the X1 - X2 dimension.&lt;/p&gt;
&lt;p&gt;In addition, a small &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; is all we need because the classes are highly separable. We see a lower test error in this example compared to Example 1 because the classes are separated pretty cleanly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;decision-boundaries-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Decision Boundaries&lt;/h3&gt;
&lt;p&gt;How would the decision boundaries look like?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgrid = make.grid(x, n = 150)
ygrid = myknn(x,xgrid, class, k = pred$best_param)
plot(xgrid,col=c(&amp;quot;orange&amp;quot;,&amp;quot;dodgerblue&amp;quot;,&amp;quot;palegreen3&amp;quot;)[as.numeric(ygrid)],pch = 20,cex = .2, main = paste(&amp;quot;K = &amp;quot;, pred$best_param))
points(x,col = c(&amp;quot;orangered&amp;quot;, &amp;quot;navyblue&amp;quot;, &amp;quot;green3&amp;quot;)[class],pch = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-16-cross-validation-function-for-classifier_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It seems like the decision boundaries are flexible enough to classify correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;next-steps&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;We have finally created KNN classifier and a cross-validated function for classifiers. One can explore and create other classifiers in addition to KNN classifier. Besides, the KNN classfier is also applicable in higher dimensions space. How would the visualization of 3D decision boundaries would look like?&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Visualization with ggplot2</title>
      <link>/readings/data-visualization-with-ggplot2/</link>
      <pubDate>Sun, 15 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/readings/data-visualization-with-ggplot2/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#first-steps&#34;&gt;First Steps&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-mpg-data-frame&#34;&gt;The mpg Data Frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-a-ggplot&#34;&gt;Creating a ggplot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a-graphing-template&#34;&gt;A Graphing Template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#aesthetic-mappings&#34;&gt;Aesthetic Mappings&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#setting-the-aesthetic-properties-manually&#34;&gt;Setting the Aesthetic Properties Manually&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mapping-aesthetics-to-a-continous-variable&#34;&gt;Mapping aesthetics to a continous variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mapping-the-same-variable-to-multiple-aesthetics&#34;&gt;Mapping the same variable to multiple aesthetics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mapping-aethetics-to-a-non-variable&#34;&gt;Mapping aethetics to a &lt;code&gt;non-variable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#common-problems&#34;&gt;Common Problems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;** This post is heavily based on &lt;a href=&#34;http://r4ds.had.co.nz/&#34;&gt;R for Data Science&lt;/a&gt;. Please consider to buy that book if you find this post useful.**&lt;/p&gt;
&lt;div id=&#34;first-steps&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;First Steps&lt;/h1&gt;
&lt;div id=&#34;the-mpg-data-frame&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The mpg Data Frame&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;mpg&lt;/code&gt; data frame will be used in this section. take a look on it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
head(mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 11
##   manufacturer model displ  year   cyl trans drv     cty   hwy fl    class
##   &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 audi         a4     1.80  1999     4 auto~ f        18    29 p     comp~
## 2 audi         a4     1.80  1999     4 manu~ f        21    29 p     comp~
## 3 audi         a4     2.00  2008     4 manu~ f        20    31 p     comp~
## 4 audi         a4     2.00  2008     4 auto~ f        21    30 p     comp~
## 5 audi         a4     2.80  1999     6 auto~ f        16    26 p     comp~
## 6 audi         a4     2.80  1999     6 manu~ f        18    26 p     comp~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;displ&lt;/strong&gt; is a car’s engine size, in liters.&lt;br /&gt;
&lt;strong&gt;hwy&lt;/strong&gt;, a car’s fuel efficiency on the highway, in miles per gallon (mpg).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-ggplot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating a ggplot&lt;/h2&gt;
&lt;p&gt;Note that &lt;code&gt;ggplot()&lt;/code&gt; is an object. The following examples will explain it.&lt;/p&gt;
&lt;p&gt;First, let’s make a basic plot on the &lt;code&gt;mpg&lt;/code&gt; dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:basic&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/readings/2018-04-15-data-visualization-with-ggplot2_files/figure-html/basic-1.png&#34; alt=&#34;A basic and a blank plot using ggplot.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A basic and a blank plot using ggplot.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Why is that so? It’s because you need to specify the x-axis and y- axis of the plot.&lt;/p&gt;
&lt;p&gt;Now, let’s plot &lt;strong&gt;displ&lt;/strong&gt; on the x-axis and &lt;strong&gt;hwy&lt;/strong&gt; on the y-axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:scatdisphwy&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/readings/2018-04-15-data-visualization-with-ggplot2_files/figure-html/scatdisphwy-1.png&#34; alt=&#34;Scatterplot of hwy against disply&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: Scatterplot of hwy against disply
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Recall that &lt;strong&gt;ggplot(data = mpg)&lt;/strong&gt; creates an empty graph. Then, we add one or more layers to the object &lt;code&gt;ggplot()&lt;/code&gt; using &lt;code&gt;+&lt;/code&gt; operator.&lt;br /&gt;
&lt;code&gt;geom_point()&lt;/code&gt; adds a layer of points to your plot, which creates scatterplot.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;geom&lt;/code&gt; function takes a &lt;em&gt;mapping&lt;/em&gt; argument. This defines how variables in your dataset are mapped to visual properties. The &lt;em&gt;mapping&lt;/em&gt; argument is always paired with &lt;strong&gt;aes()&lt;/strong&gt;. The x and y arguments of aes() specify which variables to map to the x and y-axes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-graphing-template&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A Graphing Template&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ggplot(data = DATA) +&lt;br /&gt;
GEOM_FUNCTION(mapping = aes(MAPPINGS))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;aesthetic-mappings&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Aesthetic Mappings&lt;/h1&gt;
&lt;p&gt;The &lt;strong&gt;class&lt;/strong&gt; variable of the &lt;strong&gt;mpg&lt;/strong&gt; dataset classifies cars into groups such as compact, midsize, and SUV. We can add a third variable, like &lt;strong&gt;class&lt;/strong&gt;, to a two-dimensional scatterplot by mapping it to an &lt;em&gt;aesthetic&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;An aesthetic is a visual property of the objects in your plot. Aesthetics include things like the size, the shape, or the color of your points. Let’s use the word “level” to describe aesthetic properties.&lt;br /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Let’s map the colors of your points to the &lt;code&gt;class&lt;/code&gt; variable to reveal the class of each car. To map an aesthetic to a variable, associate the name of the aesthetic (ex: color) to the name of the variable inside &lt;em&gt;aes()&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:color&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/readings/2018-04-15-data-visualization-with-ggplot2_files/figure-html/color-1.png&#34; alt=&#34;Mapping aethsthetic (color) to a third variable, class.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 3: Mapping aethsthetic (color) to a third variable, class.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Now, mapped &lt;strong&gt;class&lt;/strong&gt; to the &lt;em&gt;size&lt;/em&gt; aesthetic in the same way. Generally, mapping an unordered variable (&lt;strong&gt;class&lt;/strong&gt;) to an ordered aesthetic (&lt;em&gt;size&lt;/em&gt;) is not a good idea because it could be misleading to your audience.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data  = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, size = class))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:size&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/readings/2018-04-15-data-visualization-with-ggplot2_files/figure-html/size-1.png&#34; alt=&#34;Mapping aethsthetic (size) to a third variable, class&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 4: Mapping aethsthetic (size) to a third variable, class
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;We can also map &lt;strong&gt;class&lt;/strong&gt; to the &lt;em&gt;shape&lt;/em&gt; and &lt;em&gt;alpha&lt;/em&gt; aesthetic, which controls the transparency of the points, or the shape of the points.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, alpha = class))

q &amp;lt;- ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, shape = class))

library(gridExtra)
grid.arrange(p,q, ncol = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:alpha&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/readings/2018-04-15-data-visualization-with-ggplot2_files/figure-html/alpha-1.png&#34; alt=&#34;Mapping aethsthetic (shape and alpha) to a third variable, class, to control transparency.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 5: Mapping aethsthetic (shape and alpha) to a third variable, class, to control transparency.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note that SUV lost its shape because ggplot2 will only use six shapes at a time. By default, additional groups will go unplotted.&lt;/p&gt;

&lt;div id=&#34;setting-the-aesthetic-properties-manually&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setting the Aesthetic Properties Manually&lt;/h2&gt;
&lt;p&gt;Let’s try to set the aesthetic properties of the &lt;code&gt;geom&lt;/code&gt; manually. For example, we can make all of the points in our plot blue. It can be done by setting the aesthetic by name as an argument of your &lt;strong&gt;geom()&lt;/strong&gt; function, not the &lt;em&gt;aes()&lt;/em&gt; function; i.e., it goes outside of aes().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), color = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:bluemanual&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/readings/2018-04-15-data-visualization-with-ggplot2_files/figure-html/bluemanual-1.png&#34; alt=&#34;Changing the color of the plot manually.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 6: Changing the color of the plot manually.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The following are some values that can be set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of a color as a character string.&lt;/li&gt;
&lt;li&gt;The size of a point in mm.&lt;/li&gt;
&lt;li&gt;The shape of a point as a number.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;mapping-aesthetics-to-a-continous-variable&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mapping aesthetics to a continous variable&lt;/h2&gt;
&lt;p&gt;So what would happen when we map a continuous variable to color, size, and shape? Let’s use &lt;strong&gt;year&lt;/strong&gt; as the continuos variable and check it out.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## color
p &amp;lt;- ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, color = year))

## size
q &amp;lt;- ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, size = year))

library(gridExtra)
grid.arrange(p,q, nrow = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:contaes&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/readings/2018-04-15-data-visualization-with-ggplot2_files/figure-html/contaes-1.png&#34; alt=&#34;Mapping color and size aesthetics to a continous variable, year.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 7: Mapping color and size aesthetics to a continous variable, year.
&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;For shape:
ggplot(data = mpg) +  
  geom_point(mapping = aes(x = displ, y = hwy, shape = year))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As for color, it shows a range of colors. The same thing is happening on the size. However, a warning message stating that a continuous variable can not be mapped to shape.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;mapping-the-same-variable-to-multiple-aesthetics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mapping the same variable to multiple aesthetics&lt;/h2&gt;
&lt;p&gt;You can also map the same variable to multiple aesthetics.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg) +
  geom_point(mapping = aes(x= displ, y = hwy , color = class, size = class, shape = class))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:multipleaes&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/readings/2018-04-15-data-visualization-with-ggplot2_files/figure-html/multipleaes-1.png&#34; alt=&#34;Mapping the same variable to multiple aesthethics&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 8: Mapping the same variable to multiple aesthethics
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;mapping-aethetics-to-a-non-variable&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mapping aethetics to a &lt;code&gt;non-variable&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;How about map an aesthetic to something other than a variable name, like &lt;code&gt;aes(color = displ &amp;lt; 5)&lt;/code&gt;?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = displ&amp;lt;5))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:nonvar&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/readings/2018-04-15-data-visualization-with-ggplot2_files/figure-html/nonvar-1.png&#34; alt=&#34;Mapping aesthetics using logical expression&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 9: Mapping aesthetics using logical expression
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;common-problems&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Common Problems&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Correct the misplaced character such as pairing up the &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt; and &lt;code&gt;( )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Incomplete expression: the left-hand side of your console has a &lt;code&gt;+&lt;/code&gt;. This means that R is waiting for you to finish the expression.&lt;/li&gt;
&lt;li&gt;Use help function. &lt;strong&gt;?function_name&lt;/strong&gt; or selecting the function name and pressing F1 in RStudio. You can skip down to the examples and look for code that matches what you’re trying to do.&lt;/li&gt;
&lt;li&gt;Carefully read the error message. Sometimes the answer can be found there.&lt;/li&gt;
&lt;li&gt;Google: trying googling the error message, as it’s likely someone else has had the same problem, and has received help online.&lt;/li&gt;
&lt;li&gt;One common problem when creating ggplot2 graphics is to put the + in the wrong place: it has to come at the end of the line, not the start. Prevent:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = mpg)  
  + geom_point(mapping = aes(x = displ, y = hwy))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>K Nearest Neighbour Classsifier (self-written function)</title>
      <link>/post/k-nearest-neighbour-classifier-self-written-function/</link>
      <pubDate>Sun, 15 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/k-nearest-neighbour-classifier-self-written-function/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#self-defined-knn-classifier&#34;&gt;Self-defined KNN Classifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#simulation-errors-and-knn-boundary&#34;&gt;Simulation, errors and KNN Boundary&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#simulate-data&#34;&gt;Simulate data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#training-and-testing-errors&#34;&gt;Training and Testing Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#decision-boundaries&#34;&gt;Decision boundaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#next-steps&#34;&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The K-nearest neighbors (KNN) classifier works by indentifying &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; (a positive integer) training data points that are closest (defined by Euclidean distance) to a test observation &lt;span class=&#34;math inline&#34;&gt;\(x_0\)&lt;/span&gt; and calculate the conditional probability of &lt;span class=&#34;math inline&#34;&gt;\(x_0\)&lt;/span&gt; belongs to class &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;. The conditional probability equals to the fraction of the &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; training data points that belongs to class &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;self-defined-knn-classifier&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Self-defined KNN Classifier&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;fields&lt;/code&gt; library is used here mainly for &lt;code&gt;rdist()&lt;/code&gt;. It calculates pairwise distance between the training data points and the testing observation.&lt;/p&gt;
&lt;p&gt;The following are the steps to create KNN classifier:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create inputs for &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt;, testing data, training data, and its corresponding classes.&lt;/li&gt;
&lt;li&gt;Calculate the distance between each training data with each testing observation. Save that in a matrix or data frame.&lt;/li&gt;
&lt;li&gt;For each test observation, choose the top &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; closest training data points to it. Set the most occuring/ common classes among the &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; data points as the predicted class.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s pretty simple, isn’t it?&lt;/p&gt;
&lt;p&gt;Let’s work on it now.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myknn &amp;lt;- function(train, test, trainclass, k)
{
  # Loading library
  require(fields)
  # create an empty placeholder for predicted values
  pred = c()
  
  # calculate distance
  # The output of the &amp;quot;dist&amp;quot; dataframe is such that the rows are the 
  #     training data points, while the columns are the testing observations.
  #     The cells for each row-column pair are the Euclidean distance from
  #     training data to the corresponsing testing data
  dist = rdist(train, test)
  
  # Create a loop for each testing observation
  for (i in 1:nrow(test))
  {
  nb = data.frame(dist = dist[,i], class = trainclass)
  
  # Ranking the rows in the dataframe by the distance from the testing
  #   observation. nb stands Neighbourhood
  nb = nb[order(nb$dist),]
  
  # Choose the K closest Neighbour
  topnb = nb[1:k,]
  
  #Deciding the Class by picking the highest occurence name.
  ans = names(sort(summary(topnb$class), decreasing=T)[1])
  
  # concatenate the latest prediction to the previous one
  pred = c(pred, ans)
  }
  return(pred)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;simulation-errors-and-knn-boundary&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Simulation, errors and KNN Boundary&lt;/h1&gt;
&lt;div id=&#34;simulate-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simulate data&lt;/h2&gt;
&lt;p&gt;Lets generate some data in two dimensions, and make them a little separated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(101); n = 500
x = matrix(rnorm(n, sd = 5),n/2,2)
class = rep(c(1,2),each = n/4)
x[class == 1,] = x[class == 1,] + 7
plot(x,col = c(&amp;quot;orangered&amp;quot;, &amp;quot;navyblue&amp;quot;)[class],pch = 20, xlab = &amp;quot;x1&amp;quot;, ylab = &amp;quot;x2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-15-k-nearest-neighbour-function-self-written_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;training-and-testing-errors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Training and Testing Errors&lt;/h2&gt;
&lt;p&gt;First, let’s split the dataset into training and testing data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(101)
train = sample(1:n/2, n/4); test = -train
x.train = x[train,]; x.test = x[test,]
class.train = class[train]; class.test = class[test]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perform KNN using K = 3 and 5. The choice of &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; is usually determine by using cross-validation but they were chosen arbitarily here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;kchoice = c(3,5)
# To store the error rate
err = matrix(NA, 2,2)
colnames(err) = c(&amp;quot;train&amp;quot;, &amp;quot;test&amp;quot;)
rownames(err) = c(&amp;quot;k = 3&amp;quot;, &amp;quot;k = 5&amp;quot;)

# initializa column value
j = 1

for(i in kchoice)
{
  # For training error
  pred = myknn(x.train, x.train, as.factor(class.train),k = i)
  err[j,1] = mean(pred!=as.factor(class.train))
  # For testing error
  pred = myknn(x.train, x.test, as.factor(class.train),k = i)
  err[j,2] = mean(pred!=as.factor(class.test))
  #Update
  j = j + 1
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at the errors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       train      test
## k = 3 0.104 0.1726619
## k = 5 0.128 0.2086331&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The testing error rate is always larger than that or training error rate. In addition, using a small &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;, such as 1, will have lower training error. In fact, using &lt;span class=&#34;math inline&#34;&gt;\(k =1\)&lt;/span&gt; will give 0 training error. We also observe that using &lt;span class=&#34;math inline&#34;&gt;\(k = 3\)&lt;/span&gt; perform better than &lt;span class=&#34;math inline&#34;&gt;\(k = 5\)&lt;/span&gt; in the test data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;decision-boundaries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Decision boundaries&lt;/h2&gt;
&lt;p&gt;Let’s define another function named as &lt;code&gt;make.grid()&lt;/code&gt;. It is meant to expand the grid for all the x1 and x2.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;make.grid=function(x,n=200){
  grange=apply(x,2,range)
  x1=seq(from=grange[1,1],to=grange[2,1],length=n)
  x2=seq(from=grange[1,2],to=grange[2,2],length=n)
  expand.grid(X1=x1,X2=x2)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, draw the decision boundary. The &lt;code&gt;xgrid&lt;/code&gt; are the “test data” in this case but they are meant to show the decision boundary here.&lt;/p&gt;
&lt;p&gt;First, look at KNN = 3.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgrid = make.grid(x, n = 150)
ygrid = myknn(x,xgrid, as.factor(class), k = 3)
plot(xgrid,col=c(&amp;quot;orange&amp;quot;,&amp;quot;dodgerblue&amp;quot;)[as.numeric(ygrid)],pch = 20,cex = .2, main = &amp;quot;KNN = 3&amp;quot;)
points(x,col = c(&amp;quot;orangered&amp;quot;, &amp;quot;navyblue&amp;quot;)[class],pch = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-15-k-nearest-neighbour-function-self-written_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Those data points that fall outside of their boundaries (defined by colors in the plot) are classfied as errors.&lt;/p&gt;
&lt;p&gt;The following uses KNN = 5.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ygrid = myknn(x,xgrid, as.factor(class), k = 5)
plot(xgrid,col=c(&amp;quot;orange&amp;quot;,&amp;quot;dodgerblue&amp;quot;)[as.numeric(ygrid)],pch = 20,cex = .2, main = &amp;quot;KNN = 5&amp;quot;)
points(x,col = c(&amp;quot;orangered&amp;quot;, &amp;quot;navyblue&amp;quot;)[class],pch = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-15-k-nearest-neighbour-function-self-written_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;How about using KNN = 10? What would the decision boundary look like?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ygrid = myknn(x,xgrid, as.factor(class), k = 10)
plot(xgrid,col=c(&amp;quot;orange&amp;quot;,&amp;quot;dodgerblue&amp;quot;)[as.numeric(ygrid)],pch = 20,cex = .2, main = &amp;quot;KNN = 10&amp;quot;)
points(x,col = c(&amp;quot;orangered&amp;quot;, &amp;quot;navyblue&amp;quot;)[class],pch = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-15-k-nearest-neighbour-function-self-written_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt; It appears that the boundary is getting more linear and less flexible now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;next-steps&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Next steps&lt;/h1&gt;
&lt;p&gt;The next steps after creating a KNN classifier is to generalize it to predict numerical values in addition to classes. Incorporate cross-validation options into it is also very useful.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
